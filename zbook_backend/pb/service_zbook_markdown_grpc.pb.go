// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: service_zbook_markdown.proto

package pb

import (
	context "context"
	rpcs "github.com/zizdlp/zbook/pb/rpcs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBookMarkdown_GetMarkdownContent_FullMethodName = "/pb.ZBookMarkdown/GetMarkdownContent"
	ZBookMarkdown_GetMarkdownImage_FullMethodName   = "/pb.ZBookMarkdown/GetMarkdownImage"
	ZBookMarkdown_QueryRepoMarkdown_FullMethodName  = "/pb.ZBookMarkdown/QueryRepoMarkdown"
	ZBookMarkdown_QueryUserMarkdown_FullMethodName  = "/pb.ZBookMarkdown/QueryUserMarkdown"
	ZBookMarkdown_QueryMarkdown_FullMethodName      = "/pb.ZBookMarkdown/QueryMarkdown"
)

// ZBookMarkdownClient is the client API for ZBookMarkdown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBookMarkdownClient interface {
	// 1.GetMarkdownContent
	GetMarkdownContent(ctx context.Context, in *rpcs.GetMarkdownContentRequest, opts ...grpc.CallOption) (*rpcs.GetMarkdownContentResponse, error)
	// 2.GetMarkdownImage
	GetMarkdownImage(ctx context.Context, in *rpcs.GetMarkdownImageRequest, opts ...grpc.CallOption) (*rpcs.GetMarkdownImageResponse, error)
	// 3.QueryRepoMarkdown
	QueryRepoMarkdown(ctx context.Context, in *rpcs.QueryRepoMarkdownRequest, opts ...grpc.CallOption) (*rpcs.QueryRepoMarkdownResponse, error)
	// 4.QueryUserMarkdown
	QueryUserMarkdown(ctx context.Context, in *rpcs.QueryUserMarkdownRequest, opts ...grpc.CallOption) (*rpcs.QueryUserMarkdownResponse, error)
	// 5.QueryMarkdown
	QueryMarkdown(ctx context.Context, in *rpcs.QueryMarkdownRequest, opts ...grpc.CallOption) (*rpcs.QueryMarkdownResponse, error)
}

type zBookMarkdownClient struct {
	cc grpc.ClientConnInterface
}

func NewZBookMarkdownClient(cc grpc.ClientConnInterface) ZBookMarkdownClient {
	return &zBookMarkdownClient{cc}
}

func (c *zBookMarkdownClient) GetMarkdownContent(ctx context.Context, in *rpcs.GetMarkdownContentRequest, opts ...grpc.CallOption) (*rpcs.GetMarkdownContentResponse, error) {
	out := new(rpcs.GetMarkdownContentResponse)
	err := c.cc.Invoke(ctx, ZBookMarkdown_GetMarkdownContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookMarkdownClient) GetMarkdownImage(ctx context.Context, in *rpcs.GetMarkdownImageRequest, opts ...grpc.CallOption) (*rpcs.GetMarkdownImageResponse, error) {
	out := new(rpcs.GetMarkdownImageResponse)
	err := c.cc.Invoke(ctx, ZBookMarkdown_GetMarkdownImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookMarkdownClient) QueryRepoMarkdown(ctx context.Context, in *rpcs.QueryRepoMarkdownRequest, opts ...grpc.CallOption) (*rpcs.QueryRepoMarkdownResponse, error) {
	out := new(rpcs.QueryRepoMarkdownResponse)
	err := c.cc.Invoke(ctx, ZBookMarkdown_QueryRepoMarkdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookMarkdownClient) QueryUserMarkdown(ctx context.Context, in *rpcs.QueryUserMarkdownRequest, opts ...grpc.CallOption) (*rpcs.QueryUserMarkdownResponse, error) {
	out := new(rpcs.QueryUserMarkdownResponse)
	err := c.cc.Invoke(ctx, ZBookMarkdown_QueryUserMarkdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookMarkdownClient) QueryMarkdown(ctx context.Context, in *rpcs.QueryMarkdownRequest, opts ...grpc.CallOption) (*rpcs.QueryMarkdownResponse, error) {
	out := new(rpcs.QueryMarkdownResponse)
	err := c.cc.Invoke(ctx, ZBookMarkdown_QueryMarkdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBookMarkdownServer is the server API for ZBookMarkdown service.
// All implementations must embed UnimplementedZBookMarkdownServer
// for forward compatibility
type ZBookMarkdownServer interface {
	// 1.GetMarkdownContent
	GetMarkdownContent(context.Context, *rpcs.GetMarkdownContentRequest) (*rpcs.GetMarkdownContentResponse, error)
	// 2.GetMarkdownImage
	GetMarkdownImage(context.Context, *rpcs.GetMarkdownImageRequest) (*rpcs.GetMarkdownImageResponse, error)
	// 3.QueryRepoMarkdown
	QueryRepoMarkdown(context.Context, *rpcs.QueryRepoMarkdownRequest) (*rpcs.QueryRepoMarkdownResponse, error)
	// 4.QueryUserMarkdown
	QueryUserMarkdown(context.Context, *rpcs.QueryUserMarkdownRequest) (*rpcs.QueryUserMarkdownResponse, error)
	// 5.QueryMarkdown
	QueryMarkdown(context.Context, *rpcs.QueryMarkdownRequest) (*rpcs.QueryMarkdownResponse, error)
	mustEmbedUnimplementedZBookMarkdownServer()
}

// UnimplementedZBookMarkdownServer must be embedded to have forward compatible implementations.
type UnimplementedZBookMarkdownServer struct {
}

func (UnimplementedZBookMarkdownServer) GetMarkdownContent(context.Context, *rpcs.GetMarkdownContentRequest) (*rpcs.GetMarkdownContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkdownContent not implemented")
}
func (UnimplementedZBookMarkdownServer) GetMarkdownImage(context.Context, *rpcs.GetMarkdownImageRequest) (*rpcs.GetMarkdownImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkdownImage not implemented")
}
func (UnimplementedZBookMarkdownServer) QueryRepoMarkdown(context.Context, *rpcs.QueryRepoMarkdownRequest) (*rpcs.QueryRepoMarkdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRepoMarkdown not implemented")
}
func (UnimplementedZBookMarkdownServer) QueryUserMarkdown(context.Context, *rpcs.QueryUserMarkdownRequest) (*rpcs.QueryUserMarkdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserMarkdown not implemented")
}
func (UnimplementedZBookMarkdownServer) QueryMarkdown(context.Context, *rpcs.QueryMarkdownRequest) (*rpcs.QueryMarkdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMarkdown not implemented")
}
func (UnimplementedZBookMarkdownServer) mustEmbedUnimplementedZBookMarkdownServer() {}

// UnsafeZBookMarkdownServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBookMarkdownServer will
// result in compilation errors.
type UnsafeZBookMarkdownServer interface {
	mustEmbedUnimplementedZBookMarkdownServer()
}

func RegisterZBookMarkdownServer(s grpc.ServiceRegistrar, srv ZBookMarkdownServer) {
	s.RegisterService(&ZBookMarkdown_ServiceDesc, srv)
}

func _ZBookMarkdown_GetMarkdownContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetMarkdownContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookMarkdownServer).GetMarkdownContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookMarkdown_GetMarkdownContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookMarkdownServer).GetMarkdownContent(ctx, req.(*rpcs.GetMarkdownContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookMarkdown_GetMarkdownImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetMarkdownImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookMarkdownServer).GetMarkdownImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookMarkdown_GetMarkdownImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookMarkdownServer).GetMarkdownImage(ctx, req.(*rpcs.GetMarkdownImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookMarkdown_QueryRepoMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.QueryRepoMarkdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookMarkdownServer).QueryRepoMarkdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookMarkdown_QueryRepoMarkdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookMarkdownServer).QueryRepoMarkdown(ctx, req.(*rpcs.QueryRepoMarkdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookMarkdown_QueryUserMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.QueryUserMarkdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookMarkdownServer).QueryUserMarkdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookMarkdown_QueryUserMarkdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookMarkdownServer).QueryUserMarkdown(ctx, req.(*rpcs.QueryUserMarkdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookMarkdown_QueryMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.QueryMarkdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookMarkdownServer).QueryMarkdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookMarkdown_QueryMarkdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookMarkdownServer).QueryMarkdown(ctx, req.(*rpcs.QueryMarkdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBookMarkdown_ServiceDesc is the grpc.ServiceDesc for ZBookMarkdown service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBookMarkdown_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZBookMarkdown",
	HandlerType: (*ZBookMarkdownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMarkdownContent",
			Handler:    _ZBookMarkdown_GetMarkdownContent_Handler,
		},
		{
			MethodName: "GetMarkdownImage",
			Handler:    _ZBookMarkdown_GetMarkdownImage_Handler,
		},
		{
			MethodName: "QueryRepoMarkdown",
			Handler:    _ZBookMarkdown_QueryRepoMarkdown_Handler,
		},
		{
			MethodName: "QueryUserMarkdown",
			Handler:    _ZBookMarkdown_QueryUserMarkdown_Handler,
		},
		{
			MethodName: "QueryMarkdown",
			Handler:    _ZBookMarkdown_QueryMarkdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_zbook_markdown.proto",
}
