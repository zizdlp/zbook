// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: service_zbook_repo.proto

package pb

import (
	context "context"
	rpcs "github.com/zizdlp/zbook/pb/rpcs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBookRepo_CreateRepo_FullMethodName               = "/pb.ZBookRepo/CreateRepo"
	ZBookRepo_GetRepoConfig_FullMethodName            = "/pb.ZBookRepo/GetRepoConfig"
	ZBookRepo_DeleteRepo_FullMethodName               = "/pb.ZBookRepo/DeleteRepo"
	ZBookRepo_ManualSyncRepo_FullMethodName           = "/pb.ZBookRepo/ManualSyncRepo"
	ZBookRepo_AutoSyncRepo_FullMethodName             = "/pb.ZBookRepo/AutoSyncRepo"
	ZBookRepo_UpdateRepoInfo_FullMethodName           = "/pb.ZBookRepo/UpdateRepoInfo"
	ZBookRepo_GetRepoBasicInfo_FullMethodName         = "/pb.ZBookRepo/GetRepoBasicInfo"
	ZBookRepo_ListUserOwnRepo_FullMethodName          = "/pb.ZBookRepo/ListUserOwnRepo"
	ZBookRepo_GetListUserOwnRepoCount_FullMethodName  = "/pb.ZBookRepo/GetListUserOwnRepoCount"
	ZBookRepo_ListUserLikeRepo_FullMethodName         = "/pb.ZBookRepo/ListUserLikeRepo"
	ZBookRepo_GetListUserLikeRepoCount_FullMethodName = "/pb.ZBookRepo/GetListUserLikeRepoCount"
	ZBookRepo_ListRepo_FullMethodName                 = "/pb.ZBookRepo/ListRepo"
	ZBookRepo_GetListRepoCount_FullMethodName         = "/pb.ZBookRepo/GetListRepoCount"
	ZBookRepo_GetFirstDocument_FullMethodName         = "/pb.ZBookRepo/GetFirstDocument"
)

// ZBookRepoClient is the client API for ZBookRepo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBookRepoClient interface {
	// 1.CreateRepo
	CreateRepo(ctx context.Context, in *rpcs.CreateRepoRequest, opts ...grpc.CallOption) (*rpcs.CreateRepoResponse, error)
	// 2.GetRepoConfig
	GetRepoConfig(ctx context.Context, in *rpcs.GetRepoConfigRequest, opts ...grpc.CallOption) (*rpcs.GetRepoConfigResponse, error)
	// 3.DeleteRepo
	DeleteRepo(ctx context.Context, in *rpcs.DeleteRepoRequest, opts ...grpc.CallOption) (*rpcs.DeleteRepoResponse, error)
	// 4.ManualSyncRepo
	ManualSyncRepo(ctx context.Context, in *rpcs.ManualSyncRepoRequest, opts ...grpc.CallOption) (*rpcs.ManualSyncRepoResponse, error)
	// 5.AutoSyncRepo
	AutoSyncRepo(ctx context.Context, in *rpcs.AutoSyncRepoRequest, opts ...grpc.CallOption) (*rpcs.AutoSyncRepoResponse, error)
	// 6.UpdateRepoInfo
	UpdateRepoInfo(ctx context.Context, in *rpcs.UpdateRepoInfoRequest, opts ...grpc.CallOption) (*rpcs.UpdateRepoInfoResponse, error)
	// 7.GetRepoBasicInfo
	GetRepoBasicInfo(ctx context.Context, in *rpcs.GetRepoBasicInfoRequest, opts ...grpc.CallOption) (*rpcs.GetRepoBasicInfoResponse, error)
	// 9.ListUserOwnRepo
	ListUserOwnRepo(ctx context.Context, in *rpcs.ListUserOwnRepoRequest, opts ...grpc.CallOption) (*rpcs.ListUserOwnRepoResponse, error)
	// 10.GetListUserOwnRepoCount
	GetListUserOwnRepoCount(ctx context.Context, in *rpcs.GetListUserOwnRepoCountRequest, opts ...grpc.CallOption) (*rpcs.GetListUserOwnRepoCountResponse, error)
	// 11.ListUserLikeRepo
	ListUserLikeRepo(ctx context.Context, in *rpcs.ListUserLikeRepoRequest, opts ...grpc.CallOption) (*rpcs.ListUserLikeRepoResponse, error)
	// 12.GetListUserLikeRepoCount
	GetListUserLikeRepoCount(ctx context.Context, in *rpcs.GetListUserLikeRepoCountRequest, opts ...grpc.CallOption) (*rpcs.GetListUserLikeRepoCountResponse, error)
	// 13.ListRepo
	ListRepo(ctx context.Context, in *rpcs.ListRepoRequest, opts ...grpc.CallOption) (*rpcs.ListRepoResponse, error)
	// 14.GetListRepoCount
	GetListRepoCount(ctx context.Context, in *rpcs.GetListRepoCountRequest, opts ...grpc.CallOption) (*rpcs.GetListRepoCountResponse, error)
	// 15.GetFirstDocument
	GetFirstDocument(ctx context.Context, in *rpcs.GetFirstDocumentRequest, opts ...grpc.CallOption) (*rpcs.GetFirstDocumentResponse, error)
}

type zBookRepoClient struct {
	cc grpc.ClientConnInterface
}

func NewZBookRepoClient(cc grpc.ClientConnInterface) ZBookRepoClient {
	return &zBookRepoClient{cc}
}

func (c *zBookRepoClient) CreateRepo(ctx context.Context, in *rpcs.CreateRepoRequest, opts ...grpc.CallOption) (*rpcs.CreateRepoResponse, error) {
	out := new(rpcs.CreateRepoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_CreateRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) GetRepoConfig(ctx context.Context, in *rpcs.GetRepoConfigRequest, opts ...grpc.CallOption) (*rpcs.GetRepoConfigResponse, error) {
	out := new(rpcs.GetRepoConfigResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_GetRepoConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) DeleteRepo(ctx context.Context, in *rpcs.DeleteRepoRequest, opts ...grpc.CallOption) (*rpcs.DeleteRepoResponse, error) {
	out := new(rpcs.DeleteRepoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_DeleteRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) ManualSyncRepo(ctx context.Context, in *rpcs.ManualSyncRepoRequest, opts ...grpc.CallOption) (*rpcs.ManualSyncRepoResponse, error) {
	out := new(rpcs.ManualSyncRepoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_ManualSyncRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) AutoSyncRepo(ctx context.Context, in *rpcs.AutoSyncRepoRequest, opts ...grpc.CallOption) (*rpcs.AutoSyncRepoResponse, error) {
	out := new(rpcs.AutoSyncRepoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_AutoSyncRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) UpdateRepoInfo(ctx context.Context, in *rpcs.UpdateRepoInfoRequest, opts ...grpc.CallOption) (*rpcs.UpdateRepoInfoResponse, error) {
	out := new(rpcs.UpdateRepoInfoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_UpdateRepoInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) GetRepoBasicInfo(ctx context.Context, in *rpcs.GetRepoBasicInfoRequest, opts ...grpc.CallOption) (*rpcs.GetRepoBasicInfoResponse, error) {
	out := new(rpcs.GetRepoBasicInfoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_GetRepoBasicInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) ListUserOwnRepo(ctx context.Context, in *rpcs.ListUserOwnRepoRequest, opts ...grpc.CallOption) (*rpcs.ListUserOwnRepoResponse, error) {
	out := new(rpcs.ListUserOwnRepoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_ListUserOwnRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) GetListUserOwnRepoCount(ctx context.Context, in *rpcs.GetListUserOwnRepoCountRequest, opts ...grpc.CallOption) (*rpcs.GetListUserOwnRepoCountResponse, error) {
	out := new(rpcs.GetListUserOwnRepoCountResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_GetListUserOwnRepoCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) ListUserLikeRepo(ctx context.Context, in *rpcs.ListUserLikeRepoRequest, opts ...grpc.CallOption) (*rpcs.ListUserLikeRepoResponse, error) {
	out := new(rpcs.ListUserLikeRepoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_ListUserLikeRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) GetListUserLikeRepoCount(ctx context.Context, in *rpcs.GetListUserLikeRepoCountRequest, opts ...grpc.CallOption) (*rpcs.GetListUserLikeRepoCountResponse, error) {
	out := new(rpcs.GetListUserLikeRepoCountResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_GetListUserLikeRepoCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) ListRepo(ctx context.Context, in *rpcs.ListRepoRequest, opts ...grpc.CallOption) (*rpcs.ListRepoResponse, error) {
	out := new(rpcs.ListRepoResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_ListRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) GetListRepoCount(ctx context.Context, in *rpcs.GetListRepoCountRequest, opts ...grpc.CallOption) (*rpcs.GetListRepoCountResponse, error) {
	out := new(rpcs.GetListRepoCountResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_GetListRepoCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookRepoClient) GetFirstDocument(ctx context.Context, in *rpcs.GetFirstDocumentRequest, opts ...grpc.CallOption) (*rpcs.GetFirstDocumentResponse, error) {
	out := new(rpcs.GetFirstDocumentResponse)
	err := c.cc.Invoke(ctx, ZBookRepo_GetFirstDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBookRepoServer is the server API for ZBookRepo service.
// All implementations must embed UnimplementedZBookRepoServer
// for forward compatibility
type ZBookRepoServer interface {
	// 1.CreateRepo
	CreateRepo(context.Context, *rpcs.CreateRepoRequest) (*rpcs.CreateRepoResponse, error)
	// 2.GetRepoConfig
	GetRepoConfig(context.Context, *rpcs.GetRepoConfigRequest) (*rpcs.GetRepoConfigResponse, error)
	// 3.DeleteRepo
	DeleteRepo(context.Context, *rpcs.DeleteRepoRequest) (*rpcs.DeleteRepoResponse, error)
	// 4.ManualSyncRepo
	ManualSyncRepo(context.Context, *rpcs.ManualSyncRepoRequest) (*rpcs.ManualSyncRepoResponse, error)
	// 5.AutoSyncRepo
	AutoSyncRepo(context.Context, *rpcs.AutoSyncRepoRequest) (*rpcs.AutoSyncRepoResponse, error)
	// 6.UpdateRepoInfo
	UpdateRepoInfo(context.Context, *rpcs.UpdateRepoInfoRequest) (*rpcs.UpdateRepoInfoResponse, error)
	// 7.GetRepoBasicInfo
	GetRepoBasicInfo(context.Context, *rpcs.GetRepoBasicInfoRequest) (*rpcs.GetRepoBasicInfoResponse, error)
	// 9.ListUserOwnRepo
	ListUserOwnRepo(context.Context, *rpcs.ListUserOwnRepoRequest) (*rpcs.ListUserOwnRepoResponse, error)
	// 10.GetListUserOwnRepoCount
	GetListUserOwnRepoCount(context.Context, *rpcs.GetListUserOwnRepoCountRequest) (*rpcs.GetListUserOwnRepoCountResponse, error)
	// 11.ListUserLikeRepo
	ListUserLikeRepo(context.Context, *rpcs.ListUserLikeRepoRequest) (*rpcs.ListUserLikeRepoResponse, error)
	// 12.GetListUserLikeRepoCount
	GetListUserLikeRepoCount(context.Context, *rpcs.GetListUserLikeRepoCountRequest) (*rpcs.GetListUserLikeRepoCountResponse, error)
	// 13.ListRepo
	ListRepo(context.Context, *rpcs.ListRepoRequest) (*rpcs.ListRepoResponse, error)
	// 14.GetListRepoCount
	GetListRepoCount(context.Context, *rpcs.GetListRepoCountRequest) (*rpcs.GetListRepoCountResponse, error)
	// 15.GetFirstDocument
	GetFirstDocument(context.Context, *rpcs.GetFirstDocumentRequest) (*rpcs.GetFirstDocumentResponse, error)
	mustEmbedUnimplementedZBookRepoServer()
}

// UnimplementedZBookRepoServer must be embedded to have forward compatible implementations.
type UnimplementedZBookRepoServer struct {
}

func (UnimplementedZBookRepoServer) CreateRepo(context.Context, *rpcs.CreateRepoRequest) (*rpcs.CreateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedZBookRepoServer) GetRepoConfig(context.Context, *rpcs.GetRepoConfigRequest) (*rpcs.GetRepoConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoConfig not implemented")
}
func (UnimplementedZBookRepoServer) DeleteRepo(context.Context, *rpcs.DeleteRepoRequest) (*rpcs.DeleteRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedZBookRepoServer) ManualSyncRepo(context.Context, *rpcs.ManualSyncRepoRequest) (*rpcs.ManualSyncRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualSyncRepo not implemented")
}
func (UnimplementedZBookRepoServer) AutoSyncRepo(context.Context, *rpcs.AutoSyncRepoRequest) (*rpcs.AutoSyncRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSyncRepo not implemented")
}
func (UnimplementedZBookRepoServer) UpdateRepoInfo(context.Context, *rpcs.UpdateRepoInfoRequest) (*rpcs.UpdateRepoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepoInfo not implemented")
}
func (UnimplementedZBookRepoServer) GetRepoBasicInfo(context.Context, *rpcs.GetRepoBasicInfoRequest) (*rpcs.GetRepoBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoBasicInfo not implemented")
}
func (UnimplementedZBookRepoServer) ListUserOwnRepo(context.Context, *rpcs.ListUserOwnRepoRequest) (*rpcs.ListUserOwnRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserOwnRepo not implemented")
}
func (UnimplementedZBookRepoServer) GetListUserOwnRepoCount(context.Context, *rpcs.GetListUserOwnRepoCountRequest) (*rpcs.GetListUserOwnRepoCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserOwnRepoCount not implemented")
}
func (UnimplementedZBookRepoServer) ListUserLikeRepo(context.Context, *rpcs.ListUserLikeRepoRequest) (*rpcs.ListUserLikeRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserLikeRepo not implemented")
}
func (UnimplementedZBookRepoServer) GetListUserLikeRepoCount(context.Context, *rpcs.GetListUserLikeRepoCountRequest) (*rpcs.GetListUserLikeRepoCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserLikeRepoCount not implemented")
}
func (UnimplementedZBookRepoServer) ListRepo(context.Context, *rpcs.ListRepoRequest) (*rpcs.ListRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepo not implemented")
}
func (UnimplementedZBookRepoServer) GetListRepoCount(context.Context, *rpcs.GetListRepoCountRequest) (*rpcs.GetListRepoCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRepoCount not implemented")
}
func (UnimplementedZBookRepoServer) GetFirstDocument(context.Context, *rpcs.GetFirstDocumentRequest) (*rpcs.GetFirstDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstDocument not implemented")
}
func (UnimplementedZBookRepoServer) mustEmbedUnimplementedZBookRepoServer() {}

// UnsafeZBookRepoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBookRepoServer will
// result in compilation errors.
type UnsafeZBookRepoServer interface {
	mustEmbedUnimplementedZBookRepoServer()
}

func RegisterZBookRepoServer(s grpc.ServiceRegistrar, srv ZBookRepoServer) {
	s.RegisterService(&ZBookRepo_ServiceDesc, srv)
}

func _ZBookRepo_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_CreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).CreateRepo(ctx, req.(*rpcs.CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_GetRepoConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetRepoConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).GetRepoConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_GetRepoConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).GetRepoConfig(ctx, req.(*rpcs.GetRepoConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.DeleteRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_DeleteRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).DeleteRepo(ctx, req.(*rpcs.DeleteRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_ManualSyncRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ManualSyncRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).ManualSyncRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_ManualSyncRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).ManualSyncRepo(ctx, req.(*rpcs.ManualSyncRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_AutoSyncRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.AutoSyncRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).AutoSyncRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_AutoSyncRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).AutoSyncRepo(ctx, req.(*rpcs.AutoSyncRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_UpdateRepoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.UpdateRepoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).UpdateRepoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_UpdateRepoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).UpdateRepoInfo(ctx, req.(*rpcs.UpdateRepoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_GetRepoBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetRepoBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).GetRepoBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_GetRepoBasicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).GetRepoBasicInfo(ctx, req.(*rpcs.GetRepoBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_ListUserOwnRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListUserOwnRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).ListUserOwnRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_ListUserOwnRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).ListUserOwnRepo(ctx, req.(*rpcs.ListUserOwnRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_GetListUserOwnRepoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetListUserOwnRepoCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).GetListUserOwnRepoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_GetListUserOwnRepoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).GetListUserOwnRepoCount(ctx, req.(*rpcs.GetListUserOwnRepoCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_ListUserLikeRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListUserLikeRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).ListUserLikeRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_ListUserLikeRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).ListUserLikeRepo(ctx, req.(*rpcs.ListUserLikeRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_GetListUserLikeRepoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetListUserLikeRepoCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).GetListUserLikeRepoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_GetListUserLikeRepoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).GetListUserLikeRepoCount(ctx, req.(*rpcs.GetListUserLikeRepoCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_ListRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).ListRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_ListRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).ListRepo(ctx, req.(*rpcs.ListRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_GetListRepoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetListRepoCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).GetListRepoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_GetListRepoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).GetListRepoCount(ctx, req.(*rpcs.GetListRepoCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookRepo_GetFirstDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetFirstDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookRepoServer).GetFirstDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookRepo_GetFirstDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookRepoServer).GetFirstDocument(ctx, req.(*rpcs.GetFirstDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBookRepo_ServiceDesc is the grpc.ServiceDesc for ZBookRepo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBookRepo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZBookRepo",
	HandlerType: (*ZBookRepoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _ZBookRepo_CreateRepo_Handler,
		},
		{
			MethodName: "GetRepoConfig",
			Handler:    _ZBookRepo_GetRepoConfig_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _ZBookRepo_DeleteRepo_Handler,
		},
		{
			MethodName: "ManualSyncRepo",
			Handler:    _ZBookRepo_ManualSyncRepo_Handler,
		},
		{
			MethodName: "AutoSyncRepo",
			Handler:    _ZBookRepo_AutoSyncRepo_Handler,
		},
		{
			MethodName: "UpdateRepoInfo",
			Handler:    _ZBookRepo_UpdateRepoInfo_Handler,
		},
		{
			MethodName: "GetRepoBasicInfo",
			Handler:    _ZBookRepo_GetRepoBasicInfo_Handler,
		},
		{
			MethodName: "ListUserOwnRepo",
			Handler:    _ZBookRepo_ListUserOwnRepo_Handler,
		},
		{
			MethodName: "GetListUserOwnRepoCount",
			Handler:    _ZBookRepo_GetListUserOwnRepoCount_Handler,
		},
		{
			MethodName: "ListUserLikeRepo",
			Handler:    _ZBookRepo_ListUserLikeRepo_Handler,
		},
		{
			MethodName: "GetListUserLikeRepoCount",
			Handler:    _ZBookRepo_GetListUserLikeRepoCount_Handler,
		},
		{
			MethodName: "ListRepo",
			Handler:    _ZBookRepo_ListRepo_Handler,
		},
		{
			MethodName: "GetListRepoCount",
			Handler:    _ZBookRepo_GetListRepoCount_Handler,
		},
		{
			MethodName: "GetFirstDocument",
			Handler:    _ZBookRepo_GetFirstDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_zbook_repo.proto",
}
