// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: service_zbook_follow.proto

package pb

import (
	context "context"
	rpcs "github.com/zizdlp/zbook/pb/rpcs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBookFollow_CreateFollow_FullMethodName      = "/pb.ZBookFollow/CreateFollow"
	ZBookFollow_GetFollowStatus_FullMethodName   = "/pb.ZBookFollow/GetFollowStatus"
	ZBookFollow_DeleteFollow_FullMethodName      = "/pb.ZBookFollow/DeleteFollow"
	ZBookFollow_ListFollower_FullMethodName      = "/pb.ZBookFollow/ListFollower"
	ZBookFollow_GetFollowerCount_FullMethodName  = "/pb.ZBookFollow/GetFollowerCount"
	ZBookFollow_ListFollowing_FullMethodName     = "/pb.ZBookFollow/ListFollowing"
	ZBookFollow_GetFollowingCount_FullMethodName = "/pb.ZBookFollow/GetFollowingCount"
)

// ZBookFollowClient is the client API for ZBookFollow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBookFollowClient interface {
	// 1.CreateFollow
	CreateFollow(ctx context.Context, in *rpcs.CreateFollowRequest, opts ...grpc.CallOption) (*rpcs.CreateFollowResponse, error)
	// 2.GetFollowStatus
	GetFollowStatus(ctx context.Context, in *rpcs.GetFollowStatusRequest, opts ...grpc.CallOption) (*rpcs.GetFollowStatusResponse, error)
	// 3.DeleteFollow
	DeleteFollow(ctx context.Context, in *rpcs.DeleteFollowRequest, opts ...grpc.CallOption) (*rpcs.DeleteFollowResponse, error)
	// 4.ListFollower
	ListFollower(ctx context.Context, in *rpcs.ListFollowerRequest, opts ...grpc.CallOption) (*rpcs.ListFollowerResponse, error)
	// 5.
	GetFollowerCount(ctx context.Context, in *rpcs.GetFollowerCountRequest, opts ...grpc.CallOption) (*rpcs.GetFollowerCountResponse, error)
	// 6.ListFollowing
	ListFollowing(ctx context.Context, in *rpcs.ListFollowingRequest, opts ...grpc.CallOption) (*rpcs.ListFollowingResponse, error)
	// 7.GetFollowingCount
	GetFollowingCount(ctx context.Context, in *rpcs.GetFollowingCountRequest, opts ...grpc.CallOption) (*rpcs.GetFollowingCountResponse, error)
}

type zBookFollowClient struct {
	cc grpc.ClientConnInterface
}

func NewZBookFollowClient(cc grpc.ClientConnInterface) ZBookFollowClient {
	return &zBookFollowClient{cc}
}

func (c *zBookFollowClient) CreateFollow(ctx context.Context, in *rpcs.CreateFollowRequest, opts ...grpc.CallOption) (*rpcs.CreateFollowResponse, error) {
	out := new(rpcs.CreateFollowResponse)
	err := c.cc.Invoke(ctx, ZBookFollow_CreateFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookFollowClient) GetFollowStatus(ctx context.Context, in *rpcs.GetFollowStatusRequest, opts ...grpc.CallOption) (*rpcs.GetFollowStatusResponse, error) {
	out := new(rpcs.GetFollowStatusResponse)
	err := c.cc.Invoke(ctx, ZBookFollow_GetFollowStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookFollowClient) DeleteFollow(ctx context.Context, in *rpcs.DeleteFollowRequest, opts ...grpc.CallOption) (*rpcs.DeleteFollowResponse, error) {
	out := new(rpcs.DeleteFollowResponse)
	err := c.cc.Invoke(ctx, ZBookFollow_DeleteFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookFollowClient) ListFollower(ctx context.Context, in *rpcs.ListFollowerRequest, opts ...grpc.CallOption) (*rpcs.ListFollowerResponse, error) {
	out := new(rpcs.ListFollowerResponse)
	err := c.cc.Invoke(ctx, ZBookFollow_ListFollower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookFollowClient) GetFollowerCount(ctx context.Context, in *rpcs.GetFollowerCountRequest, opts ...grpc.CallOption) (*rpcs.GetFollowerCountResponse, error) {
	out := new(rpcs.GetFollowerCountResponse)
	err := c.cc.Invoke(ctx, ZBookFollow_GetFollowerCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookFollowClient) ListFollowing(ctx context.Context, in *rpcs.ListFollowingRequest, opts ...grpc.CallOption) (*rpcs.ListFollowingResponse, error) {
	out := new(rpcs.ListFollowingResponse)
	err := c.cc.Invoke(ctx, ZBookFollow_ListFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookFollowClient) GetFollowingCount(ctx context.Context, in *rpcs.GetFollowingCountRequest, opts ...grpc.CallOption) (*rpcs.GetFollowingCountResponse, error) {
	out := new(rpcs.GetFollowingCountResponse)
	err := c.cc.Invoke(ctx, ZBookFollow_GetFollowingCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBookFollowServer is the server API for ZBookFollow service.
// All implementations must embed UnimplementedZBookFollowServer
// for forward compatibility
type ZBookFollowServer interface {
	// 1.CreateFollow
	CreateFollow(context.Context, *rpcs.CreateFollowRequest) (*rpcs.CreateFollowResponse, error)
	// 2.GetFollowStatus
	GetFollowStatus(context.Context, *rpcs.GetFollowStatusRequest) (*rpcs.GetFollowStatusResponse, error)
	// 3.DeleteFollow
	DeleteFollow(context.Context, *rpcs.DeleteFollowRequest) (*rpcs.DeleteFollowResponse, error)
	// 4.ListFollower
	ListFollower(context.Context, *rpcs.ListFollowerRequest) (*rpcs.ListFollowerResponse, error)
	// 5.
	GetFollowerCount(context.Context, *rpcs.GetFollowerCountRequest) (*rpcs.GetFollowerCountResponse, error)
	// 6.ListFollowing
	ListFollowing(context.Context, *rpcs.ListFollowingRequest) (*rpcs.ListFollowingResponse, error)
	// 7.GetFollowingCount
	GetFollowingCount(context.Context, *rpcs.GetFollowingCountRequest) (*rpcs.GetFollowingCountResponse, error)
	mustEmbedUnimplementedZBookFollowServer()
}

// UnimplementedZBookFollowServer must be embedded to have forward compatible implementations.
type UnimplementedZBookFollowServer struct {
}

func (UnimplementedZBookFollowServer) CreateFollow(context.Context, *rpcs.CreateFollowRequest) (*rpcs.CreateFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFollow not implemented")
}
func (UnimplementedZBookFollowServer) GetFollowStatus(context.Context, *rpcs.GetFollowStatusRequest) (*rpcs.GetFollowStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowStatus not implemented")
}
func (UnimplementedZBookFollowServer) DeleteFollow(context.Context, *rpcs.DeleteFollowRequest) (*rpcs.DeleteFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollow not implemented")
}
func (UnimplementedZBookFollowServer) ListFollower(context.Context, *rpcs.ListFollowerRequest) (*rpcs.ListFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollower not implemented")
}
func (UnimplementedZBookFollowServer) GetFollowerCount(context.Context, *rpcs.GetFollowerCountRequest) (*rpcs.GetFollowerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerCount not implemented")
}
func (UnimplementedZBookFollowServer) ListFollowing(context.Context, *rpcs.ListFollowingRequest) (*rpcs.ListFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowing not implemented")
}
func (UnimplementedZBookFollowServer) GetFollowingCount(context.Context, *rpcs.GetFollowingCountRequest) (*rpcs.GetFollowingCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingCount not implemented")
}
func (UnimplementedZBookFollowServer) mustEmbedUnimplementedZBookFollowServer() {}

// UnsafeZBookFollowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBookFollowServer will
// result in compilation errors.
type UnsafeZBookFollowServer interface {
	mustEmbedUnimplementedZBookFollowServer()
}

func RegisterZBookFollowServer(s grpc.ServiceRegistrar, srv ZBookFollowServer) {
	s.RegisterService(&ZBookFollow_ServiceDesc, srv)
}

func _ZBookFollow_CreateFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.CreateFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookFollowServer).CreateFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookFollow_CreateFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookFollowServer).CreateFollow(ctx, req.(*rpcs.CreateFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookFollow_GetFollowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetFollowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookFollowServer).GetFollowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookFollow_GetFollowStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookFollowServer).GetFollowStatus(ctx, req.(*rpcs.GetFollowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookFollow_DeleteFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.DeleteFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookFollowServer).DeleteFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookFollow_DeleteFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookFollowServer).DeleteFollow(ctx, req.(*rpcs.DeleteFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookFollow_ListFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookFollowServer).ListFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookFollow_ListFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookFollowServer).ListFollower(ctx, req.(*rpcs.ListFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookFollow_GetFollowerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetFollowerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookFollowServer).GetFollowerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookFollow_GetFollowerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookFollowServer).GetFollowerCount(ctx, req.(*rpcs.GetFollowerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookFollow_ListFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookFollowServer).ListFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookFollow_ListFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookFollowServer).ListFollowing(ctx, req.(*rpcs.ListFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookFollow_GetFollowingCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetFollowingCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookFollowServer).GetFollowingCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookFollow_GetFollowingCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookFollowServer).GetFollowingCount(ctx, req.(*rpcs.GetFollowingCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBookFollow_ServiceDesc is the grpc.ServiceDesc for ZBookFollow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBookFollow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZBookFollow",
	HandlerType: (*ZBookFollowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFollow",
			Handler:    _ZBookFollow_CreateFollow_Handler,
		},
		{
			MethodName: "GetFollowStatus",
			Handler:    _ZBookFollow_GetFollowStatus_Handler,
		},
		{
			MethodName: "DeleteFollow",
			Handler:    _ZBookFollow_DeleteFollow_Handler,
		},
		{
			MethodName: "ListFollower",
			Handler:    _ZBookFollow_ListFollower_Handler,
		},
		{
			MethodName: "GetFollowerCount",
			Handler:    _ZBookFollow_GetFollowerCount_Handler,
		},
		{
			MethodName: "ListFollowing",
			Handler:    _ZBookFollow_ListFollowing_Handler,
		},
		{
			MethodName: "GetFollowingCount",
			Handler:    _ZBookFollow_GetFollowingCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_zbook_follow.proto",
}
