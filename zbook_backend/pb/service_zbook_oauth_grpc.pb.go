// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: service_zbook_oauth.proto

package pb

import (
	context "context"
	rpcs "github.com/zizdlp/zbook/pb/rpcs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBookOAuth_CreateOAuthLink_FullMethodName  = "/pb.ZBookOAuth/CreateOAuthLink"
	ZBookOAuth_CheckOAuthStatus_FullMethodName = "/pb.ZBookOAuth/CheckOAuthStatus"
	ZBookOAuth_DeleteOAuthLink_FullMethodName  = "/pb.ZBookOAuth/DeleteOAuthLink"
	ZBookOAuth_LoginByOAuth_FullMethodName     = "/pb.ZBookOAuth/LoginByOAuth"
)

// ZBookOAuthClient is the client API for ZBookOAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBookOAuthClient interface {
	// 1.CreateOAuthLink
	CreateOAuthLink(ctx context.Context, in *rpcs.CreateOAuthLinkRequest, opts ...grpc.CallOption) (*rpcs.CreateOAuthLinkResponse, error)
	// 2.CheckOAuthStatus
	CheckOAuthStatus(ctx context.Context, in *rpcs.CheckOAuthStatusRequest, opts ...grpc.CallOption) (*rpcs.CheckOAuthStatusResponse, error)
	// 3.DeleteOAuthLink
	DeleteOAuthLink(ctx context.Context, in *rpcs.DeleteOAuthLinkRequest, opts ...grpc.CallOption) (*rpcs.DeleteOAuthLinkResponse, error)
	// 4.LoginByOAuth
	LoginByOAuth(ctx context.Context, in *rpcs.LoginByOAuthRequest, opts ...grpc.CallOption) (*rpcs.LoginByOAuthResponse, error)
}

type zBookOAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewZBookOAuthClient(cc grpc.ClientConnInterface) ZBookOAuthClient {
	return &zBookOAuthClient{cc}
}

func (c *zBookOAuthClient) CreateOAuthLink(ctx context.Context, in *rpcs.CreateOAuthLinkRequest, opts ...grpc.CallOption) (*rpcs.CreateOAuthLinkResponse, error) {
	out := new(rpcs.CreateOAuthLinkResponse)
	err := c.cc.Invoke(ctx, ZBookOAuth_CreateOAuthLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookOAuthClient) CheckOAuthStatus(ctx context.Context, in *rpcs.CheckOAuthStatusRequest, opts ...grpc.CallOption) (*rpcs.CheckOAuthStatusResponse, error) {
	out := new(rpcs.CheckOAuthStatusResponse)
	err := c.cc.Invoke(ctx, ZBookOAuth_CheckOAuthStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookOAuthClient) DeleteOAuthLink(ctx context.Context, in *rpcs.DeleteOAuthLinkRequest, opts ...grpc.CallOption) (*rpcs.DeleteOAuthLinkResponse, error) {
	out := new(rpcs.DeleteOAuthLinkResponse)
	err := c.cc.Invoke(ctx, ZBookOAuth_DeleteOAuthLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookOAuthClient) LoginByOAuth(ctx context.Context, in *rpcs.LoginByOAuthRequest, opts ...grpc.CallOption) (*rpcs.LoginByOAuthResponse, error) {
	out := new(rpcs.LoginByOAuthResponse)
	err := c.cc.Invoke(ctx, ZBookOAuth_LoginByOAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBookOAuthServer is the server API for ZBookOAuth service.
// All implementations must embed UnimplementedZBookOAuthServer
// for forward compatibility
type ZBookOAuthServer interface {
	// 1.CreateOAuthLink
	CreateOAuthLink(context.Context, *rpcs.CreateOAuthLinkRequest) (*rpcs.CreateOAuthLinkResponse, error)
	// 2.CheckOAuthStatus
	CheckOAuthStatus(context.Context, *rpcs.CheckOAuthStatusRequest) (*rpcs.CheckOAuthStatusResponse, error)
	// 3.DeleteOAuthLink
	DeleteOAuthLink(context.Context, *rpcs.DeleteOAuthLinkRequest) (*rpcs.DeleteOAuthLinkResponse, error)
	// 4.LoginByOAuth
	LoginByOAuth(context.Context, *rpcs.LoginByOAuthRequest) (*rpcs.LoginByOAuthResponse, error)
	mustEmbedUnimplementedZBookOAuthServer()
}

// UnimplementedZBookOAuthServer must be embedded to have forward compatible implementations.
type UnimplementedZBookOAuthServer struct {
}

func (UnimplementedZBookOAuthServer) CreateOAuthLink(context.Context, *rpcs.CreateOAuthLinkRequest) (*rpcs.CreateOAuthLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuthLink not implemented")
}
func (UnimplementedZBookOAuthServer) CheckOAuthStatus(context.Context, *rpcs.CheckOAuthStatusRequest) (*rpcs.CheckOAuthStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOAuthStatus not implemented")
}
func (UnimplementedZBookOAuthServer) DeleteOAuthLink(context.Context, *rpcs.DeleteOAuthLinkRequest) (*rpcs.DeleteOAuthLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAuthLink not implemented")
}
func (UnimplementedZBookOAuthServer) LoginByOAuth(context.Context, *rpcs.LoginByOAuthRequest) (*rpcs.LoginByOAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByOAuth not implemented")
}
func (UnimplementedZBookOAuthServer) mustEmbedUnimplementedZBookOAuthServer() {}

// UnsafeZBookOAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBookOAuthServer will
// result in compilation errors.
type UnsafeZBookOAuthServer interface {
	mustEmbedUnimplementedZBookOAuthServer()
}

func RegisterZBookOAuthServer(s grpc.ServiceRegistrar, srv ZBookOAuthServer) {
	s.RegisterService(&ZBookOAuth_ServiceDesc, srv)
}

func _ZBookOAuth_CreateOAuthLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.CreateOAuthLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookOAuthServer).CreateOAuthLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookOAuth_CreateOAuthLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookOAuthServer).CreateOAuthLink(ctx, req.(*rpcs.CreateOAuthLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookOAuth_CheckOAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.CheckOAuthStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookOAuthServer).CheckOAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookOAuth_CheckOAuthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookOAuthServer).CheckOAuthStatus(ctx, req.(*rpcs.CheckOAuthStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookOAuth_DeleteOAuthLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.DeleteOAuthLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookOAuthServer).DeleteOAuthLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookOAuth_DeleteOAuthLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookOAuthServer).DeleteOAuthLink(ctx, req.(*rpcs.DeleteOAuthLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookOAuth_LoginByOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.LoginByOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookOAuthServer).LoginByOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookOAuth_LoginByOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookOAuthServer).LoginByOAuth(ctx, req.(*rpcs.LoginByOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBookOAuth_ServiceDesc is the grpc.ServiceDesc for ZBookOAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBookOAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZBookOAuth",
	HandlerType: (*ZBookOAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOAuthLink",
			Handler:    _ZBookOAuth_CreateOAuthLink_Handler,
		},
		{
			MethodName: "CheckOAuthStatus",
			Handler:    _ZBookOAuth_CheckOAuthStatus_Handler,
		},
		{
			MethodName: "DeleteOAuthLink",
			Handler:    _ZBookOAuth_DeleteOAuthLink_Handler,
		},
		{
			MethodName: "LoginByOAuth",
			Handler:    _ZBookOAuth_LoginByOAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_zbook_oauth.proto",
}
