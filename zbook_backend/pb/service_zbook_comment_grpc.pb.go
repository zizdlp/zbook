// clang-format off

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: service_zbook_comment.proto

package pb

import (
	context "context"
	rpcs "github.com/zizdlp/zbook/pb/rpcs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBookComment_CreateComment_FullMethodName               = "/pb.ZBookComment/CreateComment"
	ZBookComment_DeleteComment_FullMethodName               = "/pb.ZBookComment/DeleteComment"
	ZBookComment_ListCommentLevelOne_FullMethodName         = "/pb.ZBookComment/ListCommentLevelOne"
	ZBookComment_ListCommentLevelTwo_FullMethodName         = "/pb.ZBookComment/ListCommentLevelTwo"
	ZBookComment_GetCommentCountInfo_FullMethodName         = "/pb.ZBookComment/GetCommentCountInfo"
	ZBookComment_GetListCommentLevelOneCount_FullMethodName = "/pb.ZBookComment/GetListCommentLevelOneCount"
	ZBookComment_GetListCommentLevelTwoCount_FullMethodName = "/pb.ZBookComment/GetListCommentLevelTwoCount"
)

// ZBookCommentClient is the client API for ZBookComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBookCommentClient interface {
	// 1.CreateComment
	CreateComment(ctx context.Context, in *rpcs.CreateCommentRequest, opts ...grpc.CallOption) (*rpcs.CreateCommentResponse, error)
	// 2.DeleteComment
	DeleteComment(ctx context.Context, in *rpcs.DeleteCommentRequest, opts ...grpc.CallOption) (*rpcs.DeleteCommentResponse, error)
	// 3.ListCommentLevelOne
	ListCommentLevelOne(ctx context.Context, in *rpcs.ListCommentLevelOneRequest, opts ...grpc.CallOption) (*rpcs.ListCommentLevelResponse, error)
	// 4.ListCommentLevelTwo
	ListCommentLevelTwo(ctx context.Context, in *rpcs.ListCommentLevelTwoRequest, opts ...grpc.CallOption) (*rpcs.ListCommentLevelResponse, error)
	// 5.GetCommentCountInfo
	GetCommentCountInfo(ctx context.Context, in *rpcs.GetCommentCountInfoRequest, opts ...grpc.CallOption) (*rpcs.GetCommentCountInfoResponse, error)
	// 3.GetListCommentLevelOneCount
	GetListCommentLevelOneCount(ctx context.Context, in *rpcs.GetListCommentLevelOneCountRequest, opts ...grpc.CallOption) (*rpcs.GetListCommentLevelCountResponse, error)
	// 4.GetListCommentLevelTwoCount
	GetListCommentLevelTwoCount(ctx context.Context, in *rpcs.GetListCommentLevelTwoCountRequest, opts ...grpc.CallOption) (*rpcs.GetListCommentLevelCountResponse, error)
}

type zBookCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewZBookCommentClient(cc grpc.ClientConnInterface) ZBookCommentClient {
	return &zBookCommentClient{cc}
}

func (c *zBookCommentClient) CreateComment(ctx context.Context, in *rpcs.CreateCommentRequest, opts ...grpc.CallOption) (*rpcs.CreateCommentResponse, error) {
	out := new(rpcs.CreateCommentResponse)
	err := c.cc.Invoke(ctx, ZBookComment_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookCommentClient) DeleteComment(ctx context.Context, in *rpcs.DeleteCommentRequest, opts ...grpc.CallOption) (*rpcs.DeleteCommentResponse, error) {
	out := new(rpcs.DeleteCommentResponse)
	err := c.cc.Invoke(ctx, ZBookComment_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookCommentClient) ListCommentLevelOne(ctx context.Context, in *rpcs.ListCommentLevelOneRequest, opts ...grpc.CallOption) (*rpcs.ListCommentLevelResponse, error) {
	out := new(rpcs.ListCommentLevelResponse)
	err := c.cc.Invoke(ctx, ZBookComment_ListCommentLevelOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookCommentClient) ListCommentLevelTwo(ctx context.Context, in *rpcs.ListCommentLevelTwoRequest, opts ...grpc.CallOption) (*rpcs.ListCommentLevelResponse, error) {
	out := new(rpcs.ListCommentLevelResponse)
	err := c.cc.Invoke(ctx, ZBookComment_ListCommentLevelTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookCommentClient) GetCommentCountInfo(ctx context.Context, in *rpcs.GetCommentCountInfoRequest, opts ...grpc.CallOption) (*rpcs.GetCommentCountInfoResponse, error) {
	out := new(rpcs.GetCommentCountInfoResponse)
	err := c.cc.Invoke(ctx, ZBookComment_GetCommentCountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookCommentClient) GetListCommentLevelOneCount(ctx context.Context, in *rpcs.GetListCommentLevelOneCountRequest, opts ...grpc.CallOption) (*rpcs.GetListCommentLevelCountResponse, error) {
	out := new(rpcs.GetListCommentLevelCountResponse)
	err := c.cc.Invoke(ctx, ZBookComment_GetListCommentLevelOneCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookCommentClient) GetListCommentLevelTwoCount(ctx context.Context, in *rpcs.GetListCommentLevelTwoCountRequest, opts ...grpc.CallOption) (*rpcs.GetListCommentLevelCountResponse, error) {
	out := new(rpcs.GetListCommentLevelCountResponse)
	err := c.cc.Invoke(ctx, ZBookComment_GetListCommentLevelTwoCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBookCommentServer is the server API for ZBookComment service.
// All implementations must embed UnimplementedZBookCommentServer
// for forward compatibility
type ZBookCommentServer interface {
	// 1.CreateComment
	CreateComment(context.Context, *rpcs.CreateCommentRequest) (*rpcs.CreateCommentResponse, error)
	// 2.DeleteComment
	DeleteComment(context.Context, *rpcs.DeleteCommentRequest) (*rpcs.DeleteCommentResponse, error)
	// 3.ListCommentLevelOne
	ListCommentLevelOne(context.Context, *rpcs.ListCommentLevelOneRequest) (*rpcs.ListCommentLevelResponse, error)
	// 4.ListCommentLevelTwo
	ListCommentLevelTwo(context.Context, *rpcs.ListCommentLevelTwoRequest) (*rpcs.ListCommentLevelResponse, error)
	// 5.GetCommentCountInfo
	GetCommentCountInfo(context.Context, *rpcs.GetCommentCountInfoRequest) (*rpcs.GetCommentCountInfoResponse, error)
	// 3.GetListCommentLevelOneCount
	GetListCommentLevelOneCount(context.Context, *rpcs.GetListCommentLevelOneCountRequest) (*rpcs.GetListCommentLevelCountResponse, error)
	// 4.GetListCommentLevelTwoCount
	GetListCommentLevelTwoCount(context.Context, *rpcs.GetListCommentLevelTwoCountRequest) (*rpcs.GetListCommentLevelCountResponse, error)
	mustEmbedUnimplementedZBookCommentServer()
}

// UnimplementedZBookCommentServer must be embedded to have forward compatible implementations.
type UnimplementedZBookCommentServer struct {
}

func (UnimplementedZBookCommentServer) CreateComment(context.Context, *rpcs.CreateCommentRequest) (*rpcs.CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedZBookCommentServer) DeleteComment(context.Context, *rpcs.DeleteCommentRequest) (*rpcs.DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedZBookCommentServer) ListCommentLevelOne(context.Context, *rpcs.ListCommentLevelOneRequest) (*rpcs.ListCommentLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentLevelOne not implemented")
}
func (UnimplementedZBookCommentServer) ListCommentLevelTwo(context.Context, *rpcs.ListCommentLevelTwoRequest) (*rpcs.ListCommentLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentLevelTwo not implemented")
}
func (UnimplementedZBookCommentServer) GetCommentCountInfo(context.Context, *rpcs.GetCommentCountInfoRequest) (*rpcs.GetCommentCountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCountInfo not implemented")
}
func (UnimplementedZBookCommentServer) GetListCommentLevelOneCount(context.Context, *rpcs.GetListCommentLevelOneCountRequest) (*rpcs.GetListCommentLevelCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCommentLevelOneCount not implemented")
}
func (UnimplementedZBookCommentServer) GetListCommentLevelTwoCount(context.Context, *rpcs.GetListCommentLevelTwoCountRequest) (*rpcs.GetListCommentLevelCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCommentLevelTwoCount not implemented")
}
func (UnimplementedZBookCommentServer) mustEmbedUnimplementedZBookCommentServer() {}

// UnsafeZBookCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBookCommentServer will
// result in compilation errors.
type UnsafeZBookCommentServer interface {
	mustEmbedUnimplementedZBookCommentServer()
}

func RegisterZBookCommentServer(s grpc.ServiceRegistrar, srv ZBookCommentServer) {
	s.RegisterService(&ZBookComment_ServiceDesc, srv)
}

func _ZBookComment_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookComment_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentServer).CreateComment(ctx, req.(*rpcs.CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookComment_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookComment_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentServer).DeleteComment(ctx, req.(*rpcs.DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookComment_ListCommentLevelOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListCommentLevelOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentServer).ListCommentLevelOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookComment_ListCommentLevelOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentServer).ListCommentLevelOne(ctx, req.(*rpcs.ListCommentLevelOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookComment_ListCommentLevelTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListCommentLevelTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentServer).ListCommentLevelTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookComment_ListCommentLevelTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentServer).ListCommentLevelTwo(ctx, req.(*rpcs.ListCommentLevelTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookComment_GetCommentCountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetCommentCountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentServer).GetCommentCountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookComment_GetCommentCountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentServer).GetCommentCountInfo(ctx, req.(*rpcs.GetCommentCountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookComment_GetListCommentLevelOneCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetListCommentLevelOneCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentServer).GetListCommentLevelOneCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookComment_GetListCommentLevelOneCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentServer).GetListCommentLevelOneCount(ctx, req.(*rpcs.GetListCommentLevelOneCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookComment_GetListCommentLevelTwoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetListCommentLevelTwoCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentServer).GetListCommentLevelTwoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookComment_GetListCommentLevelTwoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentServer).GetListCommentLevelTwoCount(ctx, req.(*rpcs.GetListCommentLevelTwoCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBookComment_ServiceDesc is the grpc.ServiceDesc for ZBookComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBookComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZBookComment",
	HandlerType: (*ZBookCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _ZBookComment_CreateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _ZBookComment_DeleteComment_Handler,
		},
		{
			MethodName: "ListCommentLevelOne",
			Handler:    _ZBookComment_ListCommentLevelOne_Handler,
		},
		{
			MethodName: "ListCommentLevelTwo",
			Handler:    _ZBookComment_ListCommentLevelTwo_Handler,
		},
		{
			MethodName: "GetCommentCountInfo",
			Handler:    _ZBookComment_GetCommentCountInfo_Handler,
		},
		{
			MethodName: "GetListCommentLevelOneCount",
			Handler:    _ZBookComment_GetListCommentLevelOneCount_Handler,
		},
		{
			MethodName: "GetListCommentLevelTwoCount",
			Handler:    _ZBookComment_GetListCommentLevelTwoCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_zbook_comment.proto",
}
