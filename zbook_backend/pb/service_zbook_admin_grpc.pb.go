// clang-format off

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: service_zbook_admin.proto

package pb

import (
	context "context"
	rpcs "github.com/zizdlp/zbook/pb/rpcs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBookAdmin_UpdateUserBlock_FullMethodName           = "/pb.ZBookAdmin/UpdateUserBlock"
	ZBookAdmin_DeleteUser_FullMethodName                = "/pb.ZBookAdmin/DeleteUser"
	ZBookAdmin_CreateSystemNotification_FullMethodName  = "/pb.ZBookAdmin/CreateSystemNotification"
	ZBookAdmin_UpdateCommentReportStatus_FullMethodName = "/pb.ZBookAdmin/UpdateCommentReportStatus"
	ZBookAdmin_ListSession_FullMethodName               = "/pb.ZBookAdmin/ListSession"
	ZBookAdmin_GetListSessionCount_FullMethodName       = "/pb.ZBookAdmin/GetListSessionCount"
	ZBookAdmin_ListComment_FullMethodName               = "/pb.ZBookAdmin/ListComment"
	ZBookAdmin_GetListCommentCount_FullMethodName       = "/pb.ZBookAdmin/GetListCommentCount"
	ZBookAdmin_ListCommentReport_FullMethodName         = "/pb.ZBookAdmin/ListCommentReport"
	ZBookAdmin_GetListCommentReportCount_FullMethodName = "/pb.ZBookAdmin/GetListCommentReportCount"
	ZBookAdmin_GetDailyVisitorCount_FullMethodName      = "/pb.ZBookAdmin/GetDailyVisitorCount"
	ZBookAdmin_GetDailyActiveUserCount_FullMethodName   = "/pb.ZBookAdmin/GetDailyActiveUserCount"
	ZBookAdmin_GetDailyCreateUserCount_FullMethodName   = "/pb.ZBookAdmin/GetDailyCreateUserCount"
	ZBookAdmin_LogVisitor_FullMethodName                = "/pb.ZBookAdmin/LogVisitor"
	ZBookAdmin_GetDailyVisitors_FullMethodName          = "/pb.ZBookAdmin/GetDailyVisitors"
	ZBookAdmin_GetConfiguration_FullMethodName          = "/pb.ZBookAdmin/GetConfiguration"
	ZBookAdmin_UpdateConfiguration_FullMethodName       = "/pb.ZBookAdmin/UpdateConfiguration"
	ZBookAdmin_SendInvitation_FullMethodName            = "/pb.ZBookAdmin/SendInvitation"
)

// ZBookAdminClient is the client API for ZBookAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBookAdminClient interface {
	// 1.UpdateUserBlock
	UpdateUserBlock(ctx context.Context, in *rpcs.UpdateUserBlockRequest, opts ...grpc.CallOption) (*rpcs.UpdateUserBlockResponse, error)
	// 2.DeleteUser
	DeleteUser(ctx context.Context, in *rpcs.DeleteUserRequest, opts ...grpc.CallOption) (*rpcs.DeleteUserResponse, error)
	// 3.CreateSystemNotification
	CreateSystemNotification(ctx context.Context, in *rpcs.CreateSystemNotificationRequest, opts ...grpc.CallOption) (*rpcs.CreateSystemNotificationResponse, error)
	// 4.UpdateCommentReportStatus
	UpdateCommentReportStatus(ctx context.Context, in *rpcs.UpdateCommentReportStatusRequest, opts ...grpc.CallOption) (*rpcs.UpdateCommentReportStatusResponse, error)
	// 5.ListSession
	ListSession(ctx context.Context, in *rpcs.ListSessionRequest, opts ...grpc.CallOption) (*rpcs.ListSessionResponse, error)
	// 6.GetListSessionCount
	GetListSessionCount(ctx context.Context, in *rpcs.GetListSessionCountRequest, opts ...grpc.CallOption) (*rpcs.GetListSessionCountResponse, error)
	// 7.ListComment
	ListComment(ctx context.Context, in *rpcs.ListCommentRequest, opts ...grpc.CallOption) (*rpcs.ListCommentResponse, error)
	// 8.GetListCommentCount
	GetListCommentCount(ctx context.Context, in *rpcs.GetListCommentCountRequest, opts ...grpc.CallOption) (*rpcs.GetListCommentCountResponse, error)
	// 9.ListCommentReport
	ListCommentReport(ctx context.Context, in *rpcs.ListCommentReportRequest, opts ...grpc.CallOption) (*rpcs.ListCommentReportResponse, error)
	// 10.GetListCommentReportCount
	GetListCommentReportCount(ctx context.Context, in *rpcs.GetListCommentReportCountRequest, opts ...grpc.CallOption) (*rpcs.GetListCommentReportCountResponse, error)
	// 11.GetDailyVisitorCount
	GetDailyVisitorCount(ctx context.Context, in *rpcs.GetDailyVisitorCountRequest, opts ...grpc.CallOption) (*rpcs.GetDailyVisitorCountResponse, error)
	// 12.GetDailyActiveUserCount
	GetDailyActiveUserCount(ctx context.Context, in *rpcs.GetDailyActiveUserCountRequest, opts ...grpc.CallOption) (*rpcs.GetDailyActiveUserCountResponse, error)
	// 13.GetDailyCreateUserCount
	GetDailyCreateUserCount(ctx context.Context, in *rpcs.GetDailyCreateUserCountRequest, opts ...grpc.CallOption) (*rpcs.GetDailyCreateUserCountResponse, error)
	// 14.LogVisitor
	LogVisitor(ctx context.Context, in *rpcs.LogVisitorRequest, opts ...grpc.CallOption) (*rpcs.LogVisitorResponse, error)
	// 16.GetDailyVisitors
	GetDailyVisitors(ctx context.Context, in *rpcs.GetDailyVisitorsRequest, opts ...grpc.CallOption) (*rpcs.GetDailyVisitorsResponse, error)
	// 17.GetConfiguration
	GetConfiguration(ctx context.Context, in *rpcs.GetConfigurationRequest, opts ...grpc.CallOption) (*rpcs.GetConfigurationResponse, error)
	// 18.UpdateConfiguration
	UpdateConfiguration(ctx context.Context, in *rpcs.UpdateConfigurationRequest, opts ...grpc.CallOption) (*rpcs.UpdateConfigurationResponse, error)
	// 19.SendInvitation
	SendInvitation(ctx context.Context, in *rpcs.SendInvitationRequest, opts ...grpc.CallOption) (*rpcs.SendInvitationResponse, error)
}

type zBookAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewZBookAdminClient(cc grpc.ClientConnInterface) ZBookAdminClient {
	return &zBookAdminClient{cc}
}

func (c *zBookAdminClient) UpdateUserBlock(ctx context.Context, in *rpcs.UpdateUserBlockRequest, opts ...grpc.CallOption) (*rpcs.UpdateUserBlockResponse, error) {
	out := new(rpcs.UpdateUserBlockResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_UpdateUserBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) DeleteUser(ctx context.Context, in *rpcs.DeleteUserRequest, opts ...grpc.CallOption) (*rpcs.DeleteUserResponse, error) {
	out := new(rpcs.DeleteUserResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) CreateSystemNotification(ctx context.Context, in *rpcs.CreateSystemNotificationRequest, opts ...grpc.CallOption) (*rpcs.CreateSystemNotificationResponse, error) {
	out := new(rpcs.CreateSystemNotificationResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_CreateSystemNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) UpdateCommentReportStatus(ctx context.Context, in *rpcs.UpdateCommentReportStatusRequest, opts ...grpc.CallOption) (*rpcs.UpdateCommentReportStatusResponse, error) {
	out := new(rpcs.UpdateCommentReportStatusResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_UpdateCommentReportStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) ListSession(ctx context.Context, in *rpcs.ListSessionRequest, opts ...grpc.CallOption) (*rpcs.ListSessionResponse, error) {
	out := new(rpcs.ListSessionResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_ListSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) GetListSessionCount(ctx context.Context, in *rpcs.GetListSessionCountRequest, opts ...grpc.CallOption) (*rpcs.GetListSessionCountResponse, error) {
	out := new(rpcs.GetListSessionCountResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_GetListSessionCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) ListComment(ctx context.Context, in *rpcs.ListCommentRequest, opts ...grpc.CallOption) (*rpcs.ListCommentResponse, error) {
	out := new(rpcs.ListCommentResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_ListComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) GetListCommentCount(ctx context.Context, in *rpcs.GetListCommentCountRequest, opts ...grpc.CallOption) (*rpcs.GetListCommentCountResponse, error) {
	out := new(rpcs.GetListCommentCountResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_GetListCommentCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) ListCommentReport(ctx context.Context, in *rpcs.ListCommentReportRequest, opts ...grpc.CallOption) (*rpcs.ListCommentReportResponse, error) {
	out := new(rpcs.ListCommentReportResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_ListCommentReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) GetListCommentReportCount(ctx context.Context, in *rpcs.GetListCommentReportCountRequest, opts ...grpc.CallOption) (*rpcs.GetListCommentReportCountResponse, error) {
	out := new(rpcs.GetListCommentReportCountResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_GetListCommentReportCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) GetDailyVisitorCount(ctx context.Context, in *rpcs.GetDailyVisitorCountRequest, opts ...grpc.CallOption) (*rpcs.GetDailyVisitorCountResponse, error) {
	out := new(rpcs.GetDailyVisitorCountResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_GetDailyVisitorCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) GetDailyActiveUserCount(ctx context.Context, in *rpcs.GetDailyActiveUserCountRequest, opts ...grpc.CallOption) (*rpcs.GetDailyActiveUserCountResponse, error) {
	out := new(rpcs.GetDailyActiveUserCountResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_GetDailyActiveUserCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) GetDailyCreateUserCount(ctx context.Context, in *rpcs.GetDailyCreateUserCountRequest, opts ...grpc.CallOption) (*rpcs.GetDailyCreateUserCountResponse, error) {
	out := new(rpcs.GetDailyCreateUserCountResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_GetDailyCreateUserCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) LogVisitor(ctx context.Context, in *rpcs.LogVisitorRequest, opts ...grpc.CallOption) (*rpcs.LogVisitorResponse, error) {
	out := new(rpcs.LogVisitorResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_LogVisitor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) GetDailyVisitors(ctx context.Context, in *rpcs.GetDailyVisitorsRequest, opts ...grpc.CallOption) (*rpcs.GetDailyVisitorsResponse, error) {
	out := new(rpcs.GetDailyVisitorsResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_GetDailyVisitors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) GetConfiguration(ctx context.Context, in *rpcs.GetConfigurationRequest, opts ...grpc.CallOption) (*rpcs.GetConfigurationResponse, error) {
	out := new(rpcs.GetConfigurationResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_GetConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) UpdateConfiguration(ctx context.Context, in *rpcs.UpdateConfigurationRequest, opts ...grpc.CallOption) (*rpcs.UpdateConfigurationResponse, error) {
	out := new(rpcs.UpdateConfigurationResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_UpdateConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookAdminClient) SendInvitation(ctx context.Context, in *rpcs.SendInvitationRequest, opts ...grpc.CallOption) (*rpcs.SendInvitationResponse, error) {
	out := new(rpcs.SendInvitationResponse)
	err := c.cc.Invoke(ctx, ZBookAdmin_SendInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBookAdminServer is the server API for ZBookAdmin service.
// All implementations must embed UnimplementedZBookAdminServer
// for forward compatibility
type ZBookAdminServer interface {
	// 1.UpdateUserBlock
	UpdateUserBlock(context.Context, *rpcs.UpdateUserBlockRequest) (*rpcs.UpdateUserBlockResponse, error)
	// 2.DeleteUser
	DeleteUser(context.Context, *rpcs.DeleteUserRequest) (*rpcs.DeleteUserResponse, error)
	// 3.CreateSystemNotification
	CreateSystemNotification(context.Context, *rpcs.CreateSystemNotificationRequest) (*rpcs.CreateSystemNotificationResponse, error)
	// 4.UpdateCommentReportStatus
	UpdateCommentReportStatus(context.Context, *rpcs.UpdateCommentReportStatusRequest) (*rpcs.UpdateCommentReportStatusResponse, error)
	// 5.ListSession
	ListSession(context.Context, *rpcs.ListSessionRequest) (*rpcs.ListSessionResponse, error)
	// 6.GetListSessionCount
	GetListSessionCount(context.Context, *rpcs.GetListSessionCountRequest) (*rpcs.GetListSessionCountResponse, error)
	// 7.ListComment
	ListComment(context.Context, *rpcs.ListCommentRequest) (*rpcs.ListCommentResponse, error)
	// 8.GetListCommentCount
	GetListCommentCount(context.Context, *rpcs.GetListCommentCountRequest) (*rpcs.GetListCommentCountResponse, error)
	// 9.ListCommentReport
	ListCommentReport(context.Context, *rpcs.ListCommentReportRequest) (*rpcs.ListCommentReportResponse, error)
	// 10.GetListCommentReportCount
	GetListCommentReportCount(context.Context, *rpcs.GetListCommentReportCountRequest) (*rpcs.GetListCommentReportCountResponse, error)
	// 11.GetDailyVisitorCount
	GetDailyVisitorCount(context.Context, *rpcs.GetDailyVisitorCountRequest) (*rpcs.GetDailyVisitorCountResponse, error)
	// 12.GetDailyActiveUserCount
	GetDailyActiveUserCount(context.Context, *rpcs.GetDailyActiveUserCountRequest) (*rpcs.GetDailyActiveUserCountResponse, error)
	// 13.GetDailyCreateUserCount
	GetDailyCreateUserCount(context.Context, *rpcs.GetDailyCreateUserCountRequest) (*rpcs.GetDailyCreateUserCountResponse, error)
	// 14.LogVisitor
	LogVisitor(context.Context, *rpcs.LogVisitorRequest) (*rpcs.LogVisitorResponse, error)
	// 16.GetDailyVisitors
	GetDailyVisitors(context.Context, *rpcs.GetDailyVisitorsRequest) (*rpcs.GetDailyVisitorsResponse, error)
	// 17.GetConfiguration
	GetConfiguration(context.Context, *rpcs.GetConfigurationRequest) (*rpcs.GetConfigurationResponse, error)
	// 18.UpdateConfiguration
	UpdateConfiguration(context.Context, *rpcs.UpdateConfigurationRequest) (*rpcs.UpdateConfigurationResponse, error)
	// 19.SendInvitation
	SendInvitation(context.Context, *rpcs.SendInvitationRequest) (*rpcs.SendInvitationResponse, error)
	mustEmbedUnimplementedZBookAdminServer()
}

// UnimplementedZBookAdminServer must be embedded to have forward compatible implementations.
type UnimplementedZBookAdminServer struct {
}

func (UnimplementedZBookAdminServer) UpdateUserBlock(context.Context, *rpcs.UpdateUserBlockRequest) (*rpcs.UpdateUserBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBlock not implemented")
}
func (UnimplementedZBookAdminServer) DeleteUser(context.Context, *rpcs.DeleteUserRequest) (*rpcs.DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedZBookAdminServer) CreateSystemNotification(context.Context, *rpcs.CreateSystemNotificationRequest) (*rpcs.CreateSystemNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemNotification not implemented")
}
func (UnimplementedZBookAdminServer) UpdateCommentReportStatus(context.Context, *rpcs.UpdateCommentReportStatusRequest) (*rpcs.UpdateCommentReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentReportStatus not implemented")
}
func (UnimplementedZBookAdminServer) ListSession(context.Context, *rpcs.ListSessionRequest) (*rpcs.ListSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSession not implemented")
}
func (UnimplementedZBookAdminServer) GetListSessionCount(context.Context, *rpcs.GetListSessionCountRequest) (*rpcs.GetListSessionCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListSessionCount not implemented")
}
func (UnimplementedZBookAdminServer) ListComment(context.Context, *rpcs.ListCommentRequest) (*rpcs.ListCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComment not implemented")
}
func (UnimplementedZBookAdminServer) GetListCommentCount(context.Context, *rpcs.GetListCommentCountRequest) (*rpcs.GetListCommentCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCommentCount not implemented")
}
func (UnimplementedZBookAdminServer) ListCommentReport(context.Context, *rpcs.ListCommentReportRequest) (*rpcs.ListCommentReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentReport not implemented")
}
func (UnimplementedZBookAdminServer) GetListCommentReportCount(context.Context, *rpcs.GetListCommentReportCountRequest) (*rpcs.GetListCommentReportCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListCommentReportCount not implemented")
}
func (UnimplementedZBookAdminServer) GetDailyVisitorCount(context.Context, *rpcs.GetDailyVisitorCountRequest) (*rpcs.GetDailyVisitorCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyVisitorCount not implemented")
}
func (UnimplementedZBookAdminServer) GetDailyActiveUserCount(context.Context, *rpcs.GetDailyActiveUserCountRequest) (*rpcs.GetDailyActiveUserCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyActiveUserCount not implemented")
}
func (UnimplementedZBookAdminServer) GetDailyCreateUserCount(context.Context, *rpcs.GetDailyCreateUserCountRequest) (*rpcs.GetDailyCreateUserCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyCreateUserCount not implemented")
}
func (UnimplementedZBookAdminServer) LogVisitor(context.Context, *rpcs.LogVisitorRequest) (*rpcs.LogVisitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogVisitor not implemented")
}
func (UnimplementedZBookAdminServer) GetDailyVisitors(context.Context, *rpcs.GetDailyVisitorsRequest) (*rpcs.GetDailyVisitorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyVisitors not implemented")
}
func (UnimplementedZBookAdminServer) GetConfiguration(context.Context, *rpcs.GetConfigurationRequest) (*rpcs.GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedZBookAdminServer) UpdateConfiguration(context.Context, *rpcs.UpdateConfigurationRequest) (*rpcs.UpdateConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedZBookAdminServer) SendInvitation(context.Context, *rpcs.SendInvitationRequest) (*rpcs.SendInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvitation not implemented")
}
func (UnimplementedZBookAdminServer) mustEmbedUnimplementedZBookAdminServer() {}

// UnsafeZBookAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBookAdminServer will
// result in compilation errors.
type UnsafeZBookAdminServer interface {
	mustEmbedUnimplementedZBookAdminServer()
}

func RegisterZBookAdminServer(s grpc.ServiceRegistrar, srv ZBookAdminServer) {
	s.RegisterService(&ZBookAdmin_ServiceDesc, srv)
}

func _ZBookAdmin_UpdateUserBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.UpdateUserBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).UpdateUserBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_UpdateUserBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).UpdateUserBlock(ctx, req.(*rpcs.UpdateUserBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).DeleteUser(ctx, req.(*rpcs.DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_CreateSystemNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.CreateSystemNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).CreateSystemNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_CreateSystemNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).CreateSystemNotification(ctx, req.(*rpcs.CreateSystemNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_UpdateCommentReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.UpdateCommentReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).UpdateCommentReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_UpdateCommentReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).UpdateCommentReportStatus(ctx, req.(*rpcs.UpdateCommentReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_ListSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).ListSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_ListSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).ListSession(ctx, req.(*rpcs.ListSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_GetListSessionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetListSessionCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).GetListSessionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_GetListSessionCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).GetListSessionCount(ctx, req.(*rpcs.GetListSessionCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_ListComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).ListComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_ListComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).ListComment(ctx, req.(*rpcs.ListCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_GetListCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetListCommentCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).GetListCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_GetListCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).GetListCommentCount(ctx, req.(*rpcs.GetListCommentCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_ListCommentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ListCommentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).ListCommentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_ListCommentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).ListCommentReport(ctx, req.(*rpcs.ListCommentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_GetListCommentReportCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetListCommentReportCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).GetListCommentReportCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_GetListCommentReportCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).GetListCommentReportCount(ctx, req.(*rpcs.GetListCommentReportCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_GetDailyVisitorCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetDailyVisitorCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).GetDailyVisitorCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_GetDailyVisitorCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).GetDailyVisitorCount(ctx, req.(*rpcs.GetDailyVisitorCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_GetDailyActiveUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetDailyActiveUserCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).GetDailyActiveUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_GetDailyActiveUserCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).GetDailyActiveUserCount(ctx, req.(*rpcs.GetDailyActiveUserCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_GetDailyCreateUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetDailyCreateUserCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).GetDailyCreateUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_GetDailyCreateUserCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).GetDailyCreateUserCount(ctx, req.(*rpcs.GetDailyCreateUserCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_LogVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.LogVisitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).LogVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_LogVisitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).LogVisitor(ctx, req.(*rpcs.LogVisitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_GetDailyVisitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetDailyVisitorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).GetDailyVisitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_GetDailyVisitors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).GetDailyVisitors(ctx, req.(*rpcs.GetDailyVisitorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).GetConfiguration(ctx, req.(*rpcs.GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.UpdateConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_UpdateConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).UpdateConfiguration(ctx, req.(*rpcs.UpdateConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookAdmin_SendInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.SendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookAdminServer).SendInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookAdmin_SendInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookAdminServer).SendInvitation(ctx, req.(*rpcs.SendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBookAdmin_ServiceDesc is the grpc.ServiceDesc for ZBookAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBookAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZBookAdmin",
	HandlerType: (*ZBookAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserBlock",
			Handler:    _ZBookAdmin_UpdateUserBlock_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ZBookAdmin_DeleteUser_Handler,
		},
		{
			MethodName: "CreateSystemNotification",
			Handler:    _ZBookAdmin_CreateSystemNotification_Handler,
		},
		{
			MethodName: "UpdateCommentReportStatus",
			Handler:    _ZBookAdmin_UpdateCommentReportStatus_Handler,
		},
		{
			MethodName: "ListSession",
			Handler:    _ZBookAdmin_ListSession_Handler,
		},
		{
			MethodName: "GetListSessionCount",
			Handler:    _ZBookAdmin_GetListSessionCount_Handler,
		},
		{
			MethodName: "ListComment",
			Handler:    _ZBookAdmin_ListComment_Handler,
		},
		{
			MethodName: "GetListCommentCount",
			Handler:    _ZBookAdmin_GetListCommentCount_Handler,
		},
		{
			MethodName: "ListCommentReport",
			Handler:    _ZBookAdmin_ListCommentReport_Handler,
		},
		{
			MethodName: "GetListCommentReportCount",
			Handler:    _ZBookAdmin_GetListCommentReportCount_Handler,
		},
		{
			MethodName: "GetDailyVisitorCount",
			Handler:    _ZBookAdmin_GetDailyVisitorCount_Handler,
		},
		{
			MethodName: "GetDailyActiveUserCount",
			Handler:    _ZBookAdmin_GetDailyActiveUserCount_Handler,
		},
		{
			MethodName: "GetDailyCreateUserCount",
			Handler:    _ZBookAdmin_GetDailyCreateUserCount_Handler,
		},
		{
			MethodName: "LogVisitor",
			Handler:    _ZBookAdmin_LogVisitor_Handler,
		},
		{
			MethodName: "GetDailyVisitors",
			Handler:    _ZBookAdmin_GetDailyVisitors_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _ZBookAdmin_GetConfiguration_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _ZBookAdmin_UpdateConfiguration_Handler,
		},
		{
			MethodName: "SendInvitation",
			Handler:    _ZBookAdmin_SendInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_zbook_admin.proto",
}
