// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: service_zbook_comment_relation.proto

package pb

import (
	context "context"
	rpcs "github.com/zizdlp/zbook/pb/rpcs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBookCommentRelation_CreateCommentRelation_FullMethodName = "/pb.ZBookCommentRelation/CreateCommentRelation"
	ZBookCommentRelation_CreateCommentReport_FullMethodName   = "/pb.ZBookCommentRelation/CreateCommentReport"
	ZBookCommentRelation_DeleteCommentRelation_FullMethodName = "/pb.ZBookCommentRelation/DeleteCommentRelation"
)

// ZBookCommentRelationClient is the client API for ZBookCommentRelation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBookCommentRelationClient interface {
	// 1.CreateCommentRelation
	CreateCommentRelation(ctx context.Context, in *rpcs.CreateCommentRelationRequest, opts ...grpc.CallOption) (*rpcs.CreateCommentRelationResponse, error)
	// 2.CreateCommentReport
	CreateCommentReport(ctx context.Context, in *rpcs.CreateCommentReportRequest, opts ...grpc.CallOption) (*rpcs.CreateCommentReportResponse, error)
	// 3.DeleteCommentRelation
	DeleteCommentRelation(ctx context.Context, in *rpcs.DeleteCommentRelationRequest, opts ...grpc.CallOption) (*rpcs.DeleteCommentRelationResponse, error)
}

type zBookCommentRelationClient struct {
	cc grpc.ClientConnInterface
}

func NewZBookCommentRelationClient(cc grpc.ClientConnInterface) ZBookCommentRelationClient {
	return &zBookCommentRelationClient{cc}
}

func (c *zBookCommentRelationClient) CreateCommentRelation(ctx context.Context, in *rpcs.CreateCommentRelationRequest, opts ...grpc.CallOption) (*rpcs.CreateCommentRelationResponse, error) {
	out := new(rpcs.CreateCommentRelationResponse)
	err := c.cc.Invoke(ctx, ZBookCommentRelation_CreateCommentRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookCommentRelationClient) CreateCommentReport(ctx context.Context, in *rpcs.CreateCommentReportRequest, opts ...grpc.CallOption) (*rpcs.CreateCommentReportResponse, error) {
	out := new(rpcs.CreateCommentReportResponse)
	err := c.cc.Invoke(ctx, ZBookCommentRelation_CreateCommentReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookCommentRelationClient) DeleteCommentRelation(ctx context.Context, in *rpcs.DeleteCommentRelationRequest, opts ...grpc.CallOption) (*rpcs.DeleteCommentRelationResponse, error) {
	out := new(rpcs.DeleteCommentRelationResponse)
	err := c.cc.Invoke(ctx, ZBookCommentRelation_DeleteCommentRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBookCommentRelationServer is the server API for ZBookCommentRelation service.
// All implementations must embed UnimplementedZBookCommentRelationServer
// for forward compatibility
type ZBookCommentRelationServer interface {
	// 1.CreateCommentRelation
	CreateCommentRelation(context.Context, *rpcs.CreateCommentRelationRequest) (*rpcs.CreateCommentRelationResponse, error)
	// 2.CreateCommentReport
	CreateCommentReport(context.Context, *rpcs.CreateCommentReportRequest) (*rpcs.CreateCommentReportResponse, error)
	// 3.DeleteCommentRelation
	DeleteCommentRelation(context.Context, *rpcs.DeleteCommentRelationRequest) (*rpcs.DeleteCommentRelationResponse, error)
	mustEmbedUnimplementedZBookCommentRelationServer()
}

// UnimplementedZBookCommentRelationServer must be embedded to have forward compatible implementations.
type UnimplementedZBookCommentRelationServer struct {
}

func (UnimplementedZBookCommentRelationServer) CreateCommentRelation(context.Context, *rpcs.CreateCommentRelationRequest) (*rpcs.CreateCommentRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentRelation not implemented")
}
func (UnimplementedZBookCommentRelationServer) CreateCommentReport(context.Context, *rpcs.CreateCommentReportRequest) (*rpcs.CreateCommentReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentReport not implemented")
}
func (UnimplementedZBookCommentRelationServer) DeleteCommentRelation(context.Context, *rpcs.DeleteCommentRelationRequest) (*rpcs.DeleteCommentRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentRelation not implemented")
}
func (UnimplementedZBookCommentRelationServer) mustEmbedUnimplementedZBookCommentRelationServer() {}

// UnsafeZBookCommentRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBookCommentRelationServer will
// result in compilation errors.
type UnsafeZBookCommentRelationServer interface {
	mustEmbedUnimplementedZBookCommentRelationServer()
}

func RegisterZBookCommentRelationServer(s grpc.ServiceRegistrar, srv ZBookCommentRelationServer) {
	s.RegisterService(&ZBookCommentRelation_ServiceDesc, srv)
}

func _ZBookCommentRelation_CreateCommentRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.CreateCommentRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentRelationServer).CreateCommentRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookCommentRelation_CreateCommentRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentRelationServer).CreateCommentRelation(ctx, req.(*rpcs.CreateCommentRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookCommentRelation_CreateCommentReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.CreateCommentReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentRelationServer).CreateCommentReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookCommentRelation_CreateCommentReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentRelationServer).CreateCommentReport(ctx, req.(*rpcs.CreateCommentReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookCommentRelation_DeleteCommentRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.DeleteCommentRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookCommentRelationServer).DeleteCommentRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookCommentRelation_DeleteCommentRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookCommentRelationServer).DeleteCommentRelation(ctx, req.(*rpcs.DeleteCommentRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBookCommentRelation_ServiceDesc is the grpc.ServiceDesc for ZBookCommentRelation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBookCommentRelation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZBookCommentRelation",
	HandlerType: (*ZBookCommentRelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommentRelation",
			Handler:    _ZBookCommentRelation_CreateCommentRelation_Handler,
		},
		{
			MethodName: "CreateCommentReport",
			Handler:    _ZBookCommentRelation_CreateCommentReport_Handler,
		},
		{
			MethodName: "DeleteCommentRelation",
			Handler:    _ZBookCommentRelation_DeleteCommentRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_zbook_comment_relation.proto",
}
