// clang-format off

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: service_zbook_verification.proto

package pb

import (
	context "context"
	rpcs "github.com/zizdlp/zbook/pb/rpcs"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZBookVerification_VerifyEmail_FullMethodName              = "/pb.ZBookVerification/VerifyEmail"
	ZBookVerification_ResetPassword_FullMethodName            = "/pb.ZBookVerification/ResetPassword"
	ZBookVerification_SendEmailToResetPassword_FullMethodName = "/pb.ZBookVerification/SendEmailToResetPassword"
	ZBookVerification_SendEmailToVerifyEmail_FullMethodName   = "/pb.ZBookVerification/SendEmailToVerifyEmail"
	ZBookVerification_RefreshToken_FullMethodName             = "/pb.ZBookVerification/RefreshToken"
)

// ZBookVerificationClient is the client API for ZBookVerification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBookVerificationClient interface {
	// 1.VerifyEmail
	VerifyEmail(ctx context.Context, in *rpcs.VerifyEmailRequest, opts ...grpc.CallOption) (*rpcs.VerifyEmailResponse, error)
	// 2.ResetPassword
	ResetPassword(ctx context.Context, in *rpcs.ResetPasswordRequest, opts ...grpc.CallOption) (*rpcs.ResetPasswordResponse, error)
	// 3.SendEmailToResetPassword
	SendEmailToResetPassword(ctx context.Context, in *rpcs.SendEmailToResetPasswordRequest, opts ...grpc.CallOption) (*rpcs.SendEmailToResetPasswordResponse, error)
	// 4.SendEmailToVerifyEmail
	SendEmailToVerifyEmail(ctx context.Context, in *rpcs.SendEmailToVerifyEmailRequest, opts ...grpc.CallOption) (*rpcs.SendEmailToVerifyEmailResponse, error)
	// 5.RefreshToken
	RefreshToken(ctx context.Context, in *rpcs.RefreshTokenRequest, opts ...grpc.CallOption) (*rpcs.RefreshTokenResponse, error)
}

type zBookVerificationClient struct {
	cc grpc.ClientConnInterface
}

func NewZBookVerificationClient(cc grpc.ClientConnInterface) ZBookVerificationClient {
	return &zBookVerificationClient{cc}
}

func (c *zBookVerificationClient) VerifyEmail(ctx context.Context, in *rpcs.VerifyEmailRequest, opts ...grpc.CallOption) (*rpcs.VerifyEmailResponse, error) {
	out := new(rpcs.VerifyEmailResponse)
	err := c.cc.Invoke(ctx, ZBookVerification_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookVerificationClient) ResetPassword(ctx context.Context, in *rpcs.ResetPasswordRequest, opts ...grpc.CallOption) (*rpcs.ResetPasswordResponse, error) {
	out := new(rpcs.ResetPasswordResponse)
	err := c.cc.Invoke(ctx, ZBookVerification_ResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookVerificationClient) SendEmailToResetPassword(ctx context.Context, in *rpcs.SendEmailToResetPasswordRequest, opts ...grpc.CallOption) (*rpcs.SendEmailToResetPasswordResponse, error) {
	out := new(rpcs.SendEmailToResetPasswordResponse)
	err := c.cc.Invoke(ctx, ZBookVerification_SendEmailToResetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookVerificationClient) SendEmailToVerifyEmail(ctx context.Context, in *rpcs.SendEmailToVerifyEmailRequest, opts ...grpc.CallOption) (*rpcs.SendEmailToVerifyEmailResponse, error) {
	out := new(rpcs.SendEmailToVerifyEmailResponse)
	err := c.cc.Invoke(ctx, ZBookVerification_SendEmailToVerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBookVerificationClient) RefreshToken(ctx context.Context, in *rpcs.RefreshTokenRequest, opts ...grpc.CallOption) (*rpcs.RefreshTokenResponse, error) {
	out := new(rpcs.RefreshTokenResponse)
	err := c.cc.Invoke(ctx, ZBookVerification_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBookVerificationServer is the server API for ZBookVerification service.
// All implementations must embed UnimplementedZBookVerificationServer
// for forward compatibility
type ZBookVerificationServer interface {
	// 1.VerifyEmail
	VerifyEmail(context.Context, *rpcs.VerifyEmailRequest) (*rpcs.VerifyEmailResponse, error)
	// 2.ResetPassword
	ResetPassword(context.Context, *rpcs.ResetPasswordRequest) (*rpcs.ResetPasswordResponse, error)
	// 3.SendEmailToResetPassword
	SendEmailToResetPassword(context.Context, *rpcs.SendEmailToResetPasswordRequest) (*rpcs.SendEmailToResetPasswordResponse, error)
	// 4.SendEmailToVerifyEmail
	SendEmailToVerifyEmail(context.Context, *rpcs.SendEmailToVerifyEmailRequest) (*rpcs.SendEmailToVerifyEmailResponse, error)
	// 5.RefreshToken
	RefreshToken(context.Context, *rpcs.RefreshTokenRequest) (*rpcs.RefreshTokenResponse, error)
	mustEmbedUnimplementedZBookVerificationServer()
}

// UnimplementedZBookVerificationServer must be embedded to have forward compatible implementations.
type UnimplementedZBookVerificationServer struct {
}

func (UnimplementedZBookVerificationServer) VerifyEmail(context.Context, *rpcs.VerifyEmailRequest) (*rpcs.VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedZBookVerificationServer) ResetPassword(context.Context, *rpcs.ResetPasswordRequest) (*rpcs.ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedZBookVerificationServer) SendEmailToResetPassword(context.Context, *rpcs.SendEmailToResetPasswordRequest) (*rpcs.SendEmailToResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailToResetPassword not implemented")
}
func (UnimplementedZBookVerificationServer) SendEmailToVerifyEmail(context.Context, *rpcs.SendEmailToVerifyEmailRequest) (*rpcs.SendEmailToVerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailToVerifyEmail not implemented")
}
func (UnimplementedZBookVerificationServer) RefreshToken(context.Context, *rpcs.RefreshTokenRequest) (*rpcs.RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedZBookVerificationServer) mustEmbedUnimplementedZBookVerificationServer() {}

// UnsafeZBookVerificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBookVerificationServer will
// result in compilation errors.
type UnsafeZBookVerificationServer interface {
	mustEmbedUnimplementedZBookVerificationServer()
}

func RegisterZBookVerificationServer(s grpc.ServiceRegistrar, srv ZBookVerificationServer) {
	s.RegisterService(&ZBookVerification_ServiceDesc, srv)
}

func _ZBookVerification_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookVerificationServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookVerification_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookVerificationServer).VerifyEmail(ctx, req.(*rpcs.VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookVerification_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookVerificationServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookVerification_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookVerificationServer).ResetPassword(ctx, req.(*rpcs.ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookVerification_SendEmailToResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.SendEmailToResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookVerificationServer).SendEmailToResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookVerification_SendEmailToResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookVerificationServer).SendEmailToResetPassword(ctx, req.(*rpcs.SendEmailToResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookVerification_SendEmailToVerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.SendEmailToVerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookVerificationServer).SendEmailToVerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookVerification_SendEmailToVerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookVerificationServer).SendEmailToVerifyEmail(ctx, req.(*rpcs.SendEmailToVerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBookVerification_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rpcs.RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBookVerificationServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZBookVerification_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBookVerificationServer).RefreshToken(ctx, req.(*rpcs.RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBookVerification_ServiceDesc is the grpc.ServiceDesc for ZBookVerification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBookVerification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ZBookVerification",
	HandlerType: (*ZBookVerificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyEmail",
			Handler:    _ZBookVerification_VerifyEmail_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _ZBookVerification_ResetPassword_Handler,
		},
		{
			MethodName: "SendEmailToResetPassword",
			Handler:    _ZBookVerification_SendEmailToResetPassword_Handler,
		},
		{
			MethodName: "SendEmailToVerifyEmail",
			Handler:    _ZBookVerification_SendEmailToVerifyEmail_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _ZBookVerification_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_zbook_verification.proto",
}
