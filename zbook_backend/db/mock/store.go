// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zizdlp/zbook/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	netip "net/netip"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	db "github.com/zizdlp/zbook/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckOAuthStatus mocks base method.
func (m *MockStore) CheckOAuthStatus(arg0 context.Context, arg1 int64) (db.CheckOAuthStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOAuthStatus", arg0, arg1)
	ret0, _ := ret[0].(db.CheckOAuthStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOAuthStatus indicates an expected call of CheckOAuthStatus.
func (mr *MockStoreMockRecorder) CheckOAuthStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOAuthStatus", reflect.TypeOf((*MockStore)(nil).CheckOAuthStatus), arg0, arg1)
}

// CreateComment mocks base method.
func (m *MockStore) CreateComment(arg0 context.Context, arg1 db.CreateCommentParams) (db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStoreMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStore)(nil).CreateComment), arg0, arg1)
}

// CreateCommentNotification mocks base method.
func (m *MockStore) CreateCommentNotification(arg0 context.Context, arg1 db.CreateCommentNotificationParams) (db.CommentNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentNotification", arg0, arg1)
	ret0, _ := ret[0].(db.CommentNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommentNotification indicates an expected call of CreateCommentNotification.
func (mr *MockStoreMockRecorder) CreateCommentNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentNotification", reflect.TypeOf((*MockStore)(nil).CreateCommentNotification), arg0, arg1)
}

// CreateCommentRelation mocks base method.
func (m *MockStore) CreateCommentRelation(arg0 context.Context, arg1 db.CreateCommentRelationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommentRelation indicates an expected call of CreateCommentRelation.
func (mr *MockStoreMockRecorder) CreateCommentRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentRelation", reflect.TypeOf((*MockStore)(nil).CreateCommentRelation), arg0, arg1)
}

// CreateCommentReport mocks base method.
func (m *MockStore) CreateCommentReport(arg0 context.Context, arg1 db.CreateCommentReportParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentReport", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommentReport indicates an expected call of CreateCommentReport.
func (mr *MockStoreMockRecorder) CreateCommentReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentReport", reflect.TypeOf((*MockStore)(nil).CreateCommentReport), arg0, arg1)
}

// CreateCommentTx mocks base method.
func (m *MockStore) CreateCommentTx(arg0 context.Context, arg1 db.CreateCommentTxParams) (db.CreateCommentTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommentTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateCommentTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommentTx indicates an expected call of CreateCommentTx.
func (mr *MockStoreMockRecorder) CreateCommentTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommentTx", reflect.TypeOf((*MockStore)(nil).CreateCommentTx), arg0, arg1)
}

// CreateFollow mocks base method.
func (m *MockStore) CreateFollow(arg0 context.Context, arg1 db.CreateFollowParams) (db.Follow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFollow", arg0, arg1)
	ret0, _ := ret[0].(db.Follow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFollow indicates an expected call of CreateFollow.
func (mr *MockStoreMockRecorder) CreateFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFollow", reflect.TypeOf((*MockStore)(nil).CreateFollow), arg0, arg1)
}

// CreateFollowTx mocks base method.
func (m *MockStore) CreateFollowTx(arg0 context.Context, arg1 db.CreateFollowTxParams) (db.CreateFollowTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFollowTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateFollowTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFollowTx indicates an expected call of CreateFollowTx.
func (mr *MockStoreMockRecorder) CreateFollowTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFollowTx", reflect.TypeOf((*MockStore)(nil).CreateFollowTx), arg0, arg1)
}

// CreateFollowerNotification mocks base method.
func (m *MockStore) CreateFollowerNotification(arg0 context.Context, arg1 db.CreateFollowerNotificationParams) (db.FollowerNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFollowerNotification", arg0, arg1)
	ret0, _ := ret[0].(db.FollowerNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFollowerNotification indicates an expected call of CreateFollowerNotification.
func (mr *MockStoreMockRecorder) CreateFollowerNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFollowerNotification", reflect.TypeOf((*MockStore)(nil).CreateFollowerNotification), arg0, arg1)
}

// CreateInvitation mocks base method.
func (m *MockStore) CreateInvitation(arg0 context.Context, arg1 db.CreateInvitationParams) (db.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitation", arg0, arg1)
	ret0, _ := ret[0].(db.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvitation indicates an expected call of CreateInvitation.
func (mr *MockStoreMockRecorder) CreateInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitation", reflect.TypeOf((*MockStore)(nil).CreateInvitation), arg0, arg1)
}

// CreateMarkdown mocks base method.
func (m *MockStore) CreateMarkdown(arg0 context.Context, arg1 db.CreateMarkdownParams) (db.Markdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMarkdown", arg0, arg1)
	ret0, _ := ret[0].(db.Markdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMarkdown indicates an expected call of CreateMarkdown.
func (mr *MockStoreMockRecorder) CreateMarkdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMarkdown", reflect.TypeOf((*MockStore)(nil).CreateMarkdown), arg0, arg1)
}

// CreateMarkdownMulti mocks base method.
func (m *MockStore) CreateMarkdownMulti(arg0 context.Context, arg1 db.CreateMarkdownMultiParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMarkdownMulti", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMarkdownMulti indicates an expected call of CreateMarkdownMulti.
func (mr *MockStoreMockRecorder) CreateMarkdownMulti(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMarkdownMulti", reflect.TypeOf((*MockStore)(nil).CreateMarkdownMulti), arg0, arg1)
}

// CreateOAuth mocks base method.
func (m *MockStore) CreateOAuth(arg0 context.Context, arg1 db.CreateOAuthParams) (db.Oauth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOAuth", arg0, arg1)
	ret0, _ := ret[0].(db.Oauth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOAuth indicates an expected call of CreateOAuth.
func (mr *MockStoreMockRecorder) CreateOAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOAuth", reflect.TypeOf((*MockStore)(nil).CreateOAuth), arg0, arg1)
}

// CreateRepo mocks base method.
func (m *MockStore) CreateRepo(arg0 context.Context, arg1 db.CreateRepoParams) (db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", arg0, arg1)
	ret0, _ := ret[0].(db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockStoreMockRecorder) CreateRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockStore)(nil).CreateRepo), arg0, arg1)
}

// CreateRepoNotification mocks base method.
func (m *MockStore) CreateRepoNotification(arg0 context.Context, arg1 db.CreateRepoNotificationParams) (db.RepoNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoNotification", arg0, arg1)
	ret0, _ := ret[0].(db.RepoNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepoNotification indicates an expected call of CreateRepoNotification.
func (mr *MockStoreMockRecorder) CreateRepoNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoNotification", reflect.TypeOf((*MockStore)(nil).CreateRepoNotification), arg0, arg1)
}

// CreateRepoRelation mocks base method.
func (m *MockStore) CreateRepoRelation(arg0 context.Context, arg1 db.CreateRepoRelationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepoRelation indicates an expected call of CreateRepoRelation.
func (mr *MockStoreMockRecorder) CreateRepoRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoRelation", reflect.TypeOf((*MockStore)(nil).CreateRepoRelation), arg0, arg1)
}

// CreateRepoTx mocks base method.
func (m *MockStore) CreateRepoTx(arg0 context.Context, arg1 db.CreateRepoTxParams) (db.CreateRepoTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateRepoTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepoTx indicates an expected call of CreateRepoTx.
func (mr *MockStoreMockRecorder) CreateRepoTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoTx", reflect.TypeOf((*MockStore)(nil).CreateRepoTx), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateSystemNotification mocks base method.
func (m *MockStore) CreateSystemNotification(arg0 context.Context, arg1 db.CreateSystemNotificationParams) (db.SystemNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSystemNotification", arg0, arg1)
	ret0, _ := ret[0].(db.SystemNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSystemNotification indicates an expected call of CreateSystemNotification.
func (mr *MockStoreMockRecorder) CreateSystemNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemNotification", reflect.TypeOf((*MockStore)(nil).CreateSystemNotification), arg0, arg1)
}

// CreateSystemNotificationTx mocks base method.
func (m *MockStore) CreateSystemNotificationTx(arg0 context.Context, arg1 db.CreateSystemNotificationTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSystemNotificationTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSystemNotificationTx indicates an expected call of CreateSystemNotificationTx.
func (mr *MockStoreMockRecorder) CreateSystemNotificationTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemNotificationTx", reflect.TypeOf((*MockStore)(nil).CreateSystemNotificationTx), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerification mocks base method.
func (m *MockStore) CreateVerification(arg0 context.Context, arg1 db.CreateVerificationParams) (db.Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerification", arg0, arg1)
	ret0, _ := ret[0].(db.Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerification indicates an expected call of CreateVerification.
func (mr *MockStoreMockRecorder) CreateVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerification", reflect.TypeOf((*MockStore)(nil).CreateVerification), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockStore) DeleteComment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockStoreMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockStore)(nil).DeleteComment), arg0, arg1)
}

// DeleteCommentRelation mocks base method.
func (m *MockStore) DeleteCommentRelation(arg0 context.Context, arg1 db.DeleteCommentRelationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentRelation indicates an expected call of DeleteCommentRelation.
func (mr *MockStoreMockRecorder) DeleteCommentRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentRelation", reflect.TypeOf((*MockStore)(nil).DeleteCommentRelation), arg0, arg1)
}

// DeleteFollow mocks base method.
func (m *MockStore) DeleteFollow(arg0 context.Context, arg1 db.DeleteFollowParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollow", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFollow indicates an expected call of DeleteFollow.
func (mr *MockStoreMockRecorder) DeleteFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollow", reflect.TypeOf((*MockStore)(nil).DeleteFollow), arg0, arg1)
}

// DeleteFollowTx mocks base method.
func (m *MockStore) DeleteFollowTx(arg0 context.Context, arg1 db.DeleteFollowTxParams) (db.DeleteFollowTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollowTx", arg0, arg1)
	ret0, _ := ret[0].(db.DeleteFollowTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFollowTx indicates an expected call of DeleteFollowTx.
func (mr *MockStoreMockRecorder) DeleteFollowTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollowTx", reflect.TypeOf((*MockStore)(nil).DeleteFollowTx), arg0, arg1)
}

// DeleteFollowerNotification mocks base method.
func (m *MockStore) DeleteFollowerNotification(arg0 context.Context, arg1 db.DeleteFollowerNotificationParams) (db.FollowerNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollowerNotification", arg0, arg1)
	ret0, _ := ret[0].(db.FollowerNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFollowerNotification indicates an expected call of DeleteFollowerNotification.
func (mr *MockStoreMockRecorder) DeleteFollowerNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollowerNotification", reflect.TypeOf((*MockStore)(nil).DeleteFollowerNotification), arg0, arg1)
}

// DeleteMarkdownMulti mocks base method.
func (m *MockStore) DeleteMarkdownMulti(arg0 context.Context, arg1 db.DeleteMarkdownMultiParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMarkdownMulti", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMarkdownMulti indicates an expected call of DeleteMarkdownMulti.
func (mr *MockStoreMockRecorder) DeleteMarkdownMulti(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMarkdownMulti", reflect.TypeOf((*MockStore)(nil).DeleteMarkdownMulti), arg0, arg1)
}

// DeleteOAuth mocks base method.
func (m *MockStore) DeleteOAuth(arg0 context.Context, arg1 db.DeleteOAuthParams) (db.Oauth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOAuth", arg0, arg1)
	ret0, _ := ret[0].(db.Oauth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOAuth indicates an expected call of DeleteOAuth.
func (mr *MockStoreMockRecorder) DeleteOAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOAuth", reflect.TypeOf((*MockStore)(nil).DeleteOAuth), arg0, arg1)
}

// DeleteRepo mocks base method.
func (m *MockStore) DeleteRepo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepo indicates an expected call of DeleteRepo.
func (mr *MockStoreMockRecorder) DeleteRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepo", reflect.TypeOf((*MockStore)(nil).DeleteRepo), arg0, arg1)
}

// DeleteRepoRelation mocks base method.
func (m *MockStore) DeleteRepoRelation(arg0 context.Context, arg1 db.DeleteRepoRelationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoRelation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepoRelation indicates an expected call of DeleteRepoRelation.
func (mr *MockStoreMockRecorder) DeleteRepoRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoRelation", reflect.TypeOf((*MockStore)(nil).DeleteRepoRelation), arg0, arg1)
}

// DeleteRepoTx mocks base method.
func (m *MockStore) DeleteRepoTx(arg0 context.Context, arg1 db.DeleteRepoTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepoTx indicates an expected call of DeleteRepoTx.
func (mr *MockStoreMockRecorder) DeleteRepoTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoTx", reflect.TypeOf((*MockStore)(nil).DeleteRepoTx), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserTx mocks base method.
func (m *MockStore) DeleteUserTx(arg0 context.Context, arg1 db.DeleteUserTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserTx indicates an expected call of DeleteUserTx.
func (mr *MockStoreMockRecorder) DeleteUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserTx", reflect.TypeOf((*MockStore)(nil).DeleteUserTx), arg0, arg1)
}

// GetCommentBasicInfo mocks base method.
func (m *MockStore) GetCommentBasicInfo(arg0 context.Context, arg1 int64) (db.GetCommentBasicInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentBasicInfo", arg0, arg1)
	ret0, _ := ret[0].(db.GetCommentBasicInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentBasicInfo indicates an expected call of GetCommentBasicInfo.
func (mr *MockStoreMockRecorder) GetCommentBasicInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentBasicInfo", reflect.TypeOf((*MockStore)(nil).GetCommentBasicInfo), arg0, arg1)
}

// GetCommentDetail mocks base method.
func (m *MockStore) GetCommentDetail(arg0 context.Context, arg1 db.GetCommentDetailParams) (db.GetCommentDetailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentDetail", arg0, arg1)
	ret0, _ := ret[0].(db.GetCommentDetailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentDetail indicates an expected call of GetCommentDetail.
func (mr *MockStoreMockRecorder) GetCommentDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentDetail", reflect.TypeOf((*MockStore)(nil).GetCommentDetail), arg0, arg1)
}

// GetCommentRepoInfo mocks base method.
func (m *MockStore) GetCommentRepoInfo(arg0 context.Context, arg1 int64) (db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentRepoInfo", arg0, arg1)
	ret0, _ := ret[0].(db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentRepoInfo indicates an expected call of GetCommentRepoInfo.
func (mr *MockStoreMockRecorder) GetCommentRepoInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentRepoInfo", reflect.TypeOf((*MockStore)(nil).GetCommentRepoInfo), arg0, arg1)
}

// GetConfiguration mocks base method.
func (m *MockStore) GetConfiguration(arg0 context.Context, arg1 string) (db.Configuration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration", arg0, arg1)
	ret0, _ := ret[0].(db.Configuration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguration indicates an expected call of GetConfiguration.
func (mr *MockStoreMockRecorder) GetConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockStore)(nil).GetConfiguration), arg0, arg1)
}

// GetDailyActiveUserCount mocks base method.
func (m *MockStore) GetDailyActiveUserCount(arg0 context.Context, arg1 db.GetDailyActiveUserCountParams) ([]db.GetDailyActiveUserCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyActiveUserCount", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDailyActiveUserCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyActiveUserCount indicates an expected call of GetDailyActiveUserCount.
func (mr *MockStoreMockRecorder) GetDailyActiveUserCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyActiveUserCount", reflect.TypeOf((*MockStore)(nil).GetDailyActiveUserCount), arg0, arg1)
}

// GetDailyCreateUserCount mocks base method.
func (m *MockStore) GetDailyCreateUserCount(arg0 context.Context, arg1 db.GetDailyCreateUserCountParams) ([]db.GetDailyCreateUserCountRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyCreateUserCount", arg0, arg1)
	ret0, _ := ret[0].([]db.GetDailyCreateUserCountRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyCreateUserCount indicates an expected call of GetDailyCreateUserCount.
func (mr *MockStoreMockRecorder) GetDailyCreateUserCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyCreateUserCount", reflect.TypeOf((*MockStore)(nil).GetDailyCreateUserCount), arg0, arg1)
}

// GetGeoInfo mocks base method.
func (m *MockStore) GetGeoInfo(arg0 context.Context, arg1 netip.Addr) (db.Geoip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoInfo", arg0, arg1)
	ret0, _ := ret[0].(db.Geoip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoInfo indicates an expected call of GetGeoInfo.
func (mr *MockStoreMockRecorder) GetGeoInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoInfo", reflect.TypeOf((*MockStore)(nil).GetGeoInfo), arg0, arg1)
}

// GetGeoInfoBatch mocks base method.
func (m *MockStore) GetGeoInfoBatch(arg0 context.Context, arg1 []netip.Addr) ([]db.Geoip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoInfoBatch", arg0, arg1)
	ret0, _ := ret[0].([]db.Geoip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoInfoBatch indicates an expected call of GetGeoInfoBatch.
func (mr *MockStoreMockRecorder) GetGeoInfoBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoInfoBatch", reflect.TypeOf((*MockStore)(nil).GetGeoInfoBatch), arg0, arg1)
}

// GetInvitation mocks base method.
func (m *MockStore) GetInvitation(arg0 context.Context, arg1 db.GetInvitationParams) (db.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitation", arg0, arg1)
	ret0, _ := ret[0].(db.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitation indicates an expected call of GetInvitation.
func (mr *MockStoreMockRecorder) GetInvitation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitation", reflect.TypeOf((*MockStore)(nil).GetInvitation), arg0, arg1)
}

// GetListCommentCount mocks base method.
func (m *MockStore) GetListCommentCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCommentCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCommentCount indicates an expected call of GetListCommentCount.
func (mr *MockStoreMockRecorder) GetListCommentCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCommentCount", reflect.TypeOf((*MockStore)(nil).GetListCommentCount), arg0)
}

// GetListCommentLevelOneCount mocks base method.
func (m *MockStore) GetListCommentLevelOneCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCommentLevelOneCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCommentLevelOneCount indicates an expected call of GetListCommentLevelOneCount.
func (mr *MockStoreMockRecorder) GetListCommentLevelOneCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCommentLevelOneCount", reflect.TypeOf((*MockStore)(nil).GetListCommentLevelOneCount), arg0, arg1)
}

// GetListCommentLevelTwoCount mocks base method.
func (m *MockStore) GetListCommentLevelTwoCount(arg0 context.Context, arg1 pgtype.Int8) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCommentLevelTwoCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCommentLevelTwoCount indicates an expected call of GetListCommentLevelTwoCount.
func (mr *MockStoreMockRecorder) GetListCommentLevelTwoCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCommentLevelTwoCount", reflect.TypeOf((*MockStore)(nil).GetListCommentLevelTwoCount), arg0, arg1)
}

// GetListCommentNotificationUnreadedCount mocks base method.
func (m *MockStore) GetListCommentNotificationUnreadedCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCommentNotificationUnreadedCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCommentNotificationUnreadedCount indicates an expected call of GetListCommentNotificationUnreadedCount.
func (mr *MockStoreMockRecorder) GetListCommentNotificationUnreadedCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCommentNotificationUnreadedCount", reflect.TypeOf((*MockStore)(nil).GetListCommentNotificationUnreadedCount), arg0, arg1)
}

// GetListCommentReportCount mocks base method.
func (m *MockStore) GetListCommentReportCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCommentReportCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCommentReportCount indicates an expected call of GetListCommentReportCount.
func (mr *MockStoreMockRecorder) GetListCommentReportCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCommentReportCount", reflect.TypeOf((*MockStore)(nil).GetListCommentReportCount), arg0)
}

// GetListFollowerCount mocks base method.
func (m *MockStore) GetListFollowerCount(arg0 context.Context, arg1 db.GetListFollowerCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListFollowerCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListFollowerCount indicates an expected call of GetListFollowerCount.
func (mr *MockStoreMockRecorder) GetListFollowerCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListFollowerCount", reflect.TypeOf((*MockStore)(nil).GetListFollowerCount), arg0, arg1)
}

// GetListFollowerNotificationUnreadedCount mocks base method.
func (m *MockStore) GetListFollowerNotificationUnreadedCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListFollowerNotificationUnreadedCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListFollowerNotificationUnreadedCount indicates an expected call of GetListFollowerNotificationUnreadedCount.
func (mr *MockStoreMockRecorder) GetListFollowerNotificationUnreadedCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListFollowerNotificationUnreadedCount", reflect.TypeOf((*MockStore)(nil).GetListFollowerNotificationUnreadedCount), arg0, arg1)
}

// GetListFollowingCount mocks base method.
func (m *MockStore) GetListFollowingCount(arg0 context.Context, arg1 db.GetListFollowingCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListFollowingCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListFollowingCount indicates an expected call of GetListFollowingCount.
func (mr *MockStoreMockRecorder) GetListFollowingCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListFollowingCount", reflect.TypeOf((*MockStore)(nil).GetListFollowingCount), arg0, arg1)
}

// GetListRepoCount mocks base method.
func (m *MockStore) GetListRepoCount(arg0 context.Context, arg1 db.GetListRepoCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListRepoCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListRepoCount indicates an expected call of GetListRepoCount.
func (mr *MockStoreMockRecorder) GetListRepoCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListRepoCount", reflect.TypeOf((*MockStore)(nil).GetListRepoCount), arg0, arg1)
}

// GetListRepoNotificationUnreadedCount mocks base method.
func (m *MockStore) GetListRepoNotificationUnreadedCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListRepoNotificationUnreadedCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListRepoNotificationUnreadedCount indicates an expected call of GetListRepoNotificationUnreadedCount.
func (mr *MockStoreMockRecorder) GetListRepoNotificationUnreadedCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListRepoNotificationUnreadedCount", reflect.TypeOf((*MockStore)(nil).GetListRepoNotificationUnreadedCount), arg0, arg1)
}

// GetListSessionCount mocks base method.
func (m *MockStore) GetListSessionCount(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListSessionCount", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListSessionCount indicates an expected call of GetListSessionCount.
func (mr *MockStoreMockRecorder) GetListSessionCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListSessionCount", reflect.TypeOf((*MockStore)(nil).GetListSessionCount), arg0)
}

// GetListSystemNotificationUnReadedCount mocks base method.
func (m *MockStore) GetListSystemNotificationUnReadedCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListSystemNotificationUnReadedCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListSystemNotificationUnReadedCount indicates an expected call of GetListSystemNotificationUnReadedCount.
func (mr *MockStoreMockRecorder) GetListSystemNotificationUnReadedCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListSystemNotificationUnReadedCount", reflect.TypeOf((*MockStore)(nil).GetListSystemNotificationUnReadedCount), arg0, arg1)
}

// GetListUserCount mocks base method.
func (m *MockStore) GetListUserCount(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUserCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListUserCount indicates an expected call of GetListUserCount.
func (mr *MockStoreMockRecorder) GetListUserCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUserCount", reflect.TypeOf((*MockStore)(nil).GetListUserCount), arg0, arg1)
}

// GetListUserLikeRepoCount mocks base method.
func (m *MockStore) GetListUserLikeRepoCount(arg0 context.Context, arg1 db.GetListUserLikeRepoCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUserLikeRepoCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListUserLikeRepoCount indicates an expected call of GetListUserLikeRepoCount.
func (mr *MockStoreMockRecorder) GetListUserLikeRepoCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUserLikeRepoCount", reflect.TypeOf((*MockStore)(nil).GetListUserLikeRepoCount), arg0, arg1)
}

// GetListUserOwnRepoCount mocks base method.
func (m *MockStore) GetListUserOwnRepoCount(arg0 context.Context, arg1 db.GetListUserOwnRepoCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUserOwnRepoCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListUserOwnRepoCount indicates an expected call of GetListUserOwnRepoCount.
func (mr *MockStoreMockRecorder) GetListUserOwnRepoCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUserOwnRepoCount", reflect.TypeOf((*MockStore)(nil).GetListUserOwnRepoCount), arg0, arg1)
}

// GetMarkdownByID mocks base method.
func (m *MockStore) GetMarkdownByID(arg0 context.Context, arg1 int64) (db.Markdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkdownByID", arg0, arg1)
	ret0, _ := ret[0].(db.Markdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkdownByID indicates an expected call of GetMarkdownByID.
func (mr *MockStoreMockRecorder) GetMarkdownByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkdownByID", reflect.TypeOf((*MockStore)(nil).GetMarkdownByID), arg0, arg1)
}

// GetMarkdownContent mocks base method.
func (m *MockStore) GetMarkdownContent(arg0 context.Context, arg1 db.GetMarkdownContentParams) (db.Markdown, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkdownContent", arg0, arg1)
	ret0, _ := ret[0].(db.Markdown)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkdownContent indicates an expected call of GetMarkdownContent.
func (mr *MockStoreMockRecorder) GetMarkdownContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkdownContent", reflect.TypeOf((*MockStore)(nil).GetMarkdownContent), arg0, arg1)
}

// GetMarkdownRepoID mocks base method.
func (m *MockStore) GetMarkdownRepoID(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMarkdownRepoID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMarkdownRepoID indicates an expected call of GetMarkdownRepoID.
func (mr *MockStoreMockRecorder) GetMarkdownRepoID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMarkdownRepoID", reflect.TypeOf((*MockStore)(nil).GetMarkdownRepoID), arg0, arg1)
}

// GetOAuthUser mocks base method.
func (m *MockStore) GetOAuthUser(arg0 context.Context, arg1 db.GetOAuthUserParams) (db.GetOAuthUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAuthUser", arg0, arg1)
	ret0, _ := ret[0].(db.GetOAuthUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOAuthUser indicates an expected call of GetOAuthUser.
func (mr *MockStoreMockRecorder) GetOAuthUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAuthUser", reflect.TypeOf((*MockStore)(nil).GetOAuthUser), arg0, arg1)
}

// GetQueryCommentCount mocks base method.
func (m *MockStore) GetQueryCommentCount(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryCommentCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryCommentCount indicates an expected call of GetQueryCommentCount.
func (mr *MockStoreMockRecorder) GetQueryCommentCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryCommentCount", reflect.TypeOf((*MockStore)(nil).GetQueryCommentCount), arg0, arg1)
}

// GetQueryCommentReportCount mocks base method.
func (m *MockStore) GetQueryCommentReportCount(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryCommentReportCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryCommentReportCount indicates an expected call of GetQueryCommentReportCount.
func (mr *MockStoreMockRecorder) GetQueryCommentReportCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryCommentReportCount", reflect.TypeOf((*MockStore)(nil).GetQueryCommentReportCount), arg0, arg1)
}

// GetQueryFollowerCount mocks base method.
func (m *MockStore) GetQueryFollowerCount(arg0 context.Context, arg1 db.GetQueryFollowerCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryFollowerCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryFollowerCount indicates an expected call of GetQueryFollowerCount.
func (mr *MockStoreMockRecorder) GetQueryFollowerCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryFollowerCount", reflect.TypeOf((*MockStore)(nil).GetQueryFollowerCount), arg0, arg1)
}

// GetQueryFollowingCount mocks base method.
func (m *MockStore) GetQueryFollowingCount(arg0 context.Context, arg1 db.GetQueryFollowingCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryFollowingCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryFollowingCount indicates an expected call of GetQueryFollowingCount.
func (mr *MockStoreMockRecorder) GetQueryFollowingCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryFollowingCount", reflect.TypeOf((*MockStore)(nil).GetQueryFollowingCount), arg0, arg1)
}

// GetQueryRepoCount mocks base method.
func (m *MockStore) GetQueryRepoCount(arg0 context.Context, arg1 db.GetQueryRepoCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryRepoCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryRepoCount indicates an expected call of GetQueryRepoCount.
func (mr *MockStoreMockRecorder) GetQueryRepoCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryRepoCount", reflect.TypeOf((*MockStore)(nil).GetQueryRepoCount), arg0, arg1)
}

// GetQuerySessionCount mocks base method.
func (m *MockStore) GetQuerySessionCount(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuerySessionCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuerySessionCount indicates an expected call of GetQuerySessionCount.
func (mr *MockStoreMockRecorder) GetQuerySessionCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuerySessionCount", reflect.TypeOf((*MockStore)(nil).GetQuerySessionCount), arg0, arg1)
}

// GetQueryUserCount mocks base method.
func (m *MockStore) GetQueryUserCount(arg0 context.Context, arg1 db.GetQueryUserCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryUserCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryUserCount indicates an expected call of GetQueryUserCount.
func (mr *MockStoreMockRecorder) GetQueryUserCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryUserCount", reflect.TypeOf((*MockStore)(nil).GetQueryUserCount), arg0, arg1)
}

// GetQueryUserLikeRepoCount mocks base method.
func (m *MockStore) GetQueryUserLikeRepoCount(arg0 context.Context, arg1 db.GetQueryUserLikeRepoCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryUserLikeRepoCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryUserLikeRepoCount indicates an expected call of GetQueryUserLikeRepoCount.
func (mr *MockStoreMockRecorder) GetQueryUserLikeRepoCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryUserLikeRepoCount", reflect.TypeOf((*MockStore)(nil).GetQueryUserLikeRepoCount), arg0, arg1)
}

// GetQueryUserOwnRepoCount mocks base method.
func (m *MockStore) GetQueryUserOwnRepoCount(arg0 context.Context, arg1 db.GetQueryUserOwnRepoCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryUserOwnRepoCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryUserOwnRepoCount indicates an expected call of GetQueryUserOwnRepoCount.
func (mr *MockStoreMockRecorder) GetQueryUserOwnRepoCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryUserOwnRepoCount", reflect.TypeOf((*MockStore)(nil).GetQueryUserOwnRepoCount), arg0, arg1)
}

// GetRepo mocks base method.
func (m *MockStore) GetRepo(arg0 context.Context, arg1 int64) (db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0, arg1)
	ret0, _ := ret[0].(db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockStoreMockRecorder) GetRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockStore)(nil).GetRepo), arg0, arg1)
}

// GetRepoBasicInfo mocks base method.
func (m *MockStore) GetRepoBasicInfo(arg0 context.Context, arg1 db.GetRepoBasicInfoParams) (db.GetRepoBasicInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoBasicInfo", arg0, arg1)
	ret0, _ := ret[0].(db.GetRepoBasicInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoBasicInfo indicates an expected call of GetRepoBasicInfo.
func (mr *MockStoreMockRecorder) GetRepoBasicInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoBasicInfo", reflect.TypeOf((*MockStore)(nil).GetRepoBasicInfo), arg0, arg1)
}

// GetRepoByRepoName mocks base method.
func (m *MockStore) GetRepoByRepoName(arg0 context.Context, arg1 db.GetRepoByRepoNameParams) (db.GetRepoByRepoNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoByRepoName", arg0, arg1)
	ret0, _ := ret[0].(db.GetRepoByRepoNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoByRepoName indicates an expected call of GetRepoByRepoName.
func (mr *MockStoreMockRecorder) GetRepoByRepoName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoByRepoName", reflect.TypeOf((*MockStore)(nil).GetRepoByRepoName), arg0, arg1)
}

// GetRepoConfig mocks base method.
func (m *MockStore) GetRepoConfig(arg0 context.Context, arg1 db.GetRepoConfigParams) (db.GetRepoConfigRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoConfig", arg0, arg1)
	ret0, _ := ret[0].(db.GetRepoConfigRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoConfig indicates an expected call of GetRepoConfig.
func (mr *MockStoreMockRecorder) GetRepoConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoConfig", reflect.TypeOf((*MockStore)(nil).GetRepoConfig), arg0, arg1)
}

// GetRepoID mocks base method.
func (m *MockStore) GetRepoID(arg0 context.Context, arg1 db.GetRepoIDParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoID indicates an expected call of GetRepoID.
func (mr *MockStoreMockRecorder) GetRepoID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoID", reflect.TypeOf((*MockStore)(nil).GetRepoID), arg0, arg1)
}

// GetRepoPermission mocks base method.
func (m *MockStore) GetRepoPermission(arg0 context.Context, arg1 int64) (db.GetRepoPermissionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPermission", arg0, arg1)
	ret0, _ := ret[0].(db.GetRepoPermissionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoPermission indicates an expected call of GetRepoPermission.
func (mr *MockStoreMockRecorder) GetRepoPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPermission", reflect.TypeOf((*MockStore)(nil).GetRepoPermission), arg0, arg1)
}

// GetRepoRelation mocks base method.
func (m *MockStore) GetRepoRelation(arg0 context.Context, arg1 db.GetRepoRelationParams) (db.RepoRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoRelation", arg0, arg1)
	ret0, _ := ret[0].(db.RepoRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoRelation indicates an expected call of GetRepoRelation.
func (mr *MockStoreMockRecorder) GetRepoRelation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoRelation", reflect.TypeOf((*MockStore)(nil).GetRepoRelation), arg0, arg1)
}

// GetSelectedUserByRepoCount mocks base method.
func (m *MockStore) GetSelectedUserByRepoCount(arg0 context.Context, arg1 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectedUserByRepoCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectedUserByRepoCount indicates an expected call of GetSelectedUserByRepoCount.
func (mr *MockStoreMockRecorder) GetSelectedUserByRepoCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectedUserByRepoCount", reflect.TypeOf((*MockStore)(nil).GetSelectedUserByRepoCount), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUnReadCount mocks base method.
func (m *MockStore) GetUnReadCount(arg0 context.Context, arg1 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnReadCount", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnReadCount indicates an expected call of GetUnReadCount.
func (mr *MockStoreMockRecorder) GetUnReadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnReadCount", reflect.TypeOf((*MockStore)(nil).GetUnReadCount), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserInfo mocks base method.
func (m *MockStore) GetUserInfo(arg0 context.Context, arg1 db.GetUserInfoParams) (db.GetUserInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", arg0, arg1)
	ret0, _ := ret[0].(db.GetUserInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockStoreMockRecorder) GetUserInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockStore)(nil).GetUserInfo), arg0, arg1)
}

// GetVerification mocks base method.
func (m *MockStore) GetVerification(arg0 context.Context, arg1 string) (db.GetVerificationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerification", arg0, arg1)
	ret0, _ := ret[0].(db.GetVerificationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerification indicates an expected call of GetVerification.
func (mr *MockStoreMockRecorder) GetVerification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerification", reflect.TypeOf((*MockStore)(nil).GetVerification), arg0, arg1)
}

// IsFollowing mocks base method.
func (m *MockStore) IsFollowing(arg0 context.Context, arg1 db.IsFollowingParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFollowing", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFollowing indicates an expected call of IsFollowing.
func (mr *MockStoreMockRecorder) IsFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFollowing", reflect.TypeOf((*MockStore)(nil).IsFollowing), arg0, arg1)
}

// ListComment mocks base method.
func (m *MockStore) ListComment(arg0 context.Context, arg1 db.ListCommentParams) ([]db.ListCommentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComment", arg0, arg1)
	ret0, _ := ret[0].([]db.ListCommentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComment indicates an expected call of ListComment.
func (mr *MockStoreMockRecorder) ListComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComment", reflect.TypeOf((*MockStore)(nil).ListComment), arg0, arg1)
}

// ListCommentLevelOne mocks base method.
func (m *MockStore) ListCommentLevelOne(arg0 context.Context, arg1 db.ListCommentLevelOneParams) ([]db.ListCommentLevelOneRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentLevelOne", arg0, arg1)
	ret0, _ := ret[0].([]db.ListCommentLevelOneRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentLevelOne indicates an expected call of ListCommentLevelOne.
func (mr *MockStoreMockRecorder) ListCommentLevelOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentLevelOne", reflect.TypeOf((*MockStore)(nil).ListCommentLevelOne), arg0, arg1)
}

// ListCommentLevelTwo mocks base method.
func (m *MockStore) ListCommentLevelTwo(arg0 context.Context, arg1 db.ListCommentLevelTwoParams) ([]db.ListCommentLevelTwoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentLevelTwo", arg0, arg1)
	ret0, _ := ret[0].([]db.ListCommentLevelTwoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentLevelTwo indicates an expected call of ListCommentLevelTwo.
func (mr *MockStoreMockRecorder) ListCommentLevelTwo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentLevelTwo", reflect.TypeOf((*MockStore)(nil).ListCommentLevelTwo), arg0, arg1)
}

// ListCommentNotification mocks base method.
func (m *MockStore) ListCommentNotification(arg0 context.Context, arg1 db.ListCommentNotificationParams) ([]db.ListCommentNotificationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentNotification", arg0, arg1)
	ret0, _ := ret[0].([]db.ListCommentNotificationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentNotification indicates an expected call of ListCommentNotification.
func (mr *MockStoreMockRecorder) ListCommentNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentNotification", reflect.TypeOf((*MockStore)(nil).ListCommentNotification), arg0, arg1)
}

// ListCommentReport mocks base method.
func (m *MockStore) ListCommentReport(arg0 context.Context, arg1 db.ListCommentReportParams) ([]db.ListCommentReportRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentReport", arg0, arg1)
	ret0, _ := ret[0].([]db.ListCommentReportRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentReport indicates an expected call of ListCommentReport.
func (mr *MockStoreMockRecorder) ListCommentReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentReport", reflect.TypeOf((*MockStore)(nil).ListCommentReport), arg0, arg1)
}

// ListFollower mocks base method.
func (m *MockStore) ListFollower(arg0 context.Context, arg1 db.ListFollowerParams) ([]db.ListFollowerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollower", arg0, arg1)
	ret0, _ := ret[0].([]db.ListFollowerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollower indicates an expected call of ListFollower.
func (mr *MockStoreMockRecorder) ListFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollower", reflect.TypeOf((*MockStore)(nil).ListFollower), arg0, arg1)
}

// ListFollowerNotification mocks base method.
func (m *MockStore) ListFollowerNotification(arg0 context.Context, arg1 db.ListFollowerNotificationParams) ([]db.ListFollowerNotificationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowerNotification", arg0, arg1)
	ret0, _ := ret[0].([]db.ListFollowerNotificationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowerNotification indicates an expected call of ListFollowerNotification.
func (mr *MockStoreMockRecorder) ListFollowerNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowerNotification", reflect.TypeOf((*MockStore)(nil).ListFollowerNotification), arg0, arg1)
}

// ListFollowing mocks base method.
func (m *MockStore) ListFollowing(arg0 context.Context, arg1 db.ListFollowingParams) ([]db.ListFollowingRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFollowing", arg0, arg1)
	ret0, _ := ret[0].([]db.ListFollowingRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFollowing indicates an expected call of ListFollowing.
func (mr *MockStoreMockRecorder) ListFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFollowing", reflect.TypeOf((*MockStore)(nil).ListFollowing), arg0, arg1)
}

// ListRepo mocks base method.
func (m *MockStore) ListRepo(arg0 context.Context, arg1 db.ListRepoParams) ([]db.ListRepoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.ListRepoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepo indicates an expected call of ListRepo.
func (mr *MockStoreMockRecorder) ListRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepo", reflect.TypeOf((*MockStore)(nil).ListRepo), arg0, arg1)
}

// ListRepoNotification mocks base method.
func (m *MockStore) ListRepoNotification(arg0 context.Context, arg1 db.ListRepoNotificationParams) ([]db.ListRepoNotificationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoNotification", arg0, arg1)
	ret0, _ := ret[0].([]db.ListRepoNotificationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoNotification indicates an expected call of ListRepoNotification.
func (mr *MockStoreMockRecorder) ListRepoNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoNotification", reflect.TypeOf((*MockStore)(nil).ListRepoNotification), arg0, arg1)
}

// ListSelectedUserByRepo mocks base method.
func (m *MockStore) ListSelectedUserByRepo(arg0 context.Context, arg1 db.ListSelectedUserByRepoParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSelectedUserByRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectedUserByRepo indicates an expected call of ListSelectedUserByRepo.
func (mr *MockStoreMockRecorder) ListSelectedUserByRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectedUserByRepo", reflect.TypeOf((*MockStore)(nil).ListSelectedUserByRepo), arg0, arg1)
}

// ListSession mocks base method.
func (m *MockStore) ListSession(arg0 context.Context, arg1 db.ListSessionParams) ([]db.ListSessionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSession", arg0, arg1)
	ret0, _ := ret[0].([]db.ListSessionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSession indicates an expected call of ListSession.
func (mr *MockStoreMockRecorder) ListSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSession", reflect.TypeOf((*MockStore)(nil).ListSession), arg0, arg1)
}

// ListSystemNotification mocks base method.
func (m *MockStore) ListSystemNotification(arg0 context.Context, arg1 db.ListSystemNotificationParams) ([]db.ListSystemNotificationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSystemNotification", arg0, arg1)
	ret0, _ := ret[0].([]db.ListSystemNotificationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSystemNotification indicates an expected call of ListSystemNotification.
func (mr *MockStoreMockRecorder) ListSystemNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSystemNotification", reflect.TypeOf((*MockStore)(nil).ListSystemNotification), arg0, arg1)
}

// ListUser mocks base method.
func (m *MockStore) ListUser(arg0 context.Context, arg1 db.ListUserParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockStoreMockRecorder) ListUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockStore)(nil).ListUser), arg0, arg1)
}

// ListUserLikeRepo mocks base method.
func (m *MockStore) ListUserLikeRepo(arg0 context.Context, arg1 db.ListUserLikeRepoParams) ([]db.ListUserLikeRepoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserLikeRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUserLikeRepoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserLikeRepo indicates an expected call of ListUserLikeRepo.
func (mr *MockStoreMockRecorder) ListUserLikeRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserLikeRepo", reflect.TypeOf((*MockStore)(nil).ListUserLikeRepo), arg0, arg1)
}

// ListUserOwnRepo mocks base method.
func (m *MockStore) ListUserOwnRepo(arg0 context.Context, arg1 db.ListUserOwnRepoParams) ([]db.ListUserOwnRepoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserOwnRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUserOwnRepoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserOwnRepo indicates an expected call of ListUserOwnRepo.
func (mr *MockStoreMockRecorder) ListUserOwnRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserOwnRepo", reflect.TypeOf((*MockStore)(nil).ListUserOwnRepo), arg0, arg1)
}

// ManualSyncRepoTx mocks base method.
func (m *MockStore) ManualSyncRepoTx(arg0 context.Context, arg1 db.ManualSyncRepoTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManualSyncRepoTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManualSyncRepoTx indicates an expected call of ManualSyncRepoTx.
func (mr *MockStoreMockRecorder) ManualSyncRepoTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualSyncRepoTx", reflect.TypeOf((*MockStore)(nil).ManualSyncRepoTx), arg0, arg1)
}

// MarkCommentNotificationReaded mocks base method.
func (m *MockStore) MarkCommentNotificationReaded(arg0 context.Context, arg1 db.MarkCommentNotificationReadedParams) (db.CommentNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkCommentNotificationReaded", arg0, arg1)
	ret0, _ := ret[0].(db.CommentNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkCommentNotificationReaded indicates an expected call of MarkCommentNotificationReaded.
func (mr *MockStoreMockRecorder) MarkCommentNotificationReaded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkCommentNotificationReaded", reflect.TypeOf((*MockStore)(nil).MarkCommentNotificationReaded), arg0, arg1)
}

// MarkFollowerNotificationReaded mocks base method.
func (m *MockStore) MarkFollowerNotificationReaded(arg0 context.Context, arg1 db.MarkFollowerNotificationReadedParams) (db.FollowerNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFollowerNotificationReaded", arg0, arg1)
	ret0, _ := ret[0].(db.FollowerNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkFollowerNotificationReaded indicates an expected call of MarkFollowerNotificationReaded.
func (mr *MockStoreMockRecorder) MarkFollowerNotificationReaded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFollowerNotificationReaded", reflect.TypeOf((*MockStore)(nil).MarkFollowerNotificationReaded), arg0, arg1)
}

// MarkInvitationAsUsed mocks base method.
func (m *MockStore) MarkInvitationAsUsed(arg0 context.Context, arg1 db.MarkInvitationAsUsedParams) (db.Invitation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkInvitationAsUsed", arg0, arg1)
	ret0, _ := ret[0].(db.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkInvitationAsUsed indicates an expected call of MarkInvitationAsUsed.
func (mr *MockStoreMockRecorder) MarkInvitationAsUsed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkInvitationAsUsed", reflect.TypeOf((*MockStore)(nil).MarkInvitationAsUsed), arg0, arg1)
}

// MarkRepoNotificationReaded mocks base method.
func (m *MockStore) MarkRepoNotificationReaded(arg0 context.Context, arg1 db.MarkRepoNotificationReadedParams) (db.RepoNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRepoNotificationReaded", arg0, arg1)
	ret0, _ := ret[0].(db.RepoNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkRepoNotificationReaded indicates an expected call of MarkRepoNotificationReaded.
func (mr *MockStoreMockRecorder) MarkRepoNotificationReaded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRepoNotificationReaded", reflect.TypeOf((*MockStore)(nil).MarkRepoNotificationReaded), arg0, arg1)
}

// MarkSystemNotificationReaded mocks base method.
func (m *MockStore) MarkSystemNotificationReaded(arg0 context.Context, arg1 db.MarkSystemNotificationReadedParams) (db.SystemNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkSystemNotificationReaded", arg0, arg1)
	ret0, _ := ret[0].(db.SystemNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkSystemNotificationReaded indicates an expected call of MarkSystemNotificationReaded.
func (mr *MockStoreMockRecorder) MarkSystemNotificationReaded(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkSystemNotificationReaded", reflect.TypeOf((*MockStore)(nil).MarkSystemNotificationReaded), arg0, arg1)
}

// MarkVerificationAsUsed mocks base method.
func (m *MockStore) MarkVerificationAsUsed(arg0 context.Context, arg1 string) (db.Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkVerificationAsUsed", arg0, arg1)
	ret0, _ := ret[0].(db.Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkVerificationAsUsed indicates an expected call of MarkVerificationAsUsed.
func (mr *MockStoreMockRecorder) MarkVerificationAsUsed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkVerificationAsUsed", reflect.TypeOf((*MockStore)(nil).MarkVerificationAsUsed), arg0, arg1)
}

// QueryComment mocks base method.
func (m *MockStore) QueryComment(arg0 context.Context, arg1 db.QueryCommentParams) ([]db.QueryCommentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryComment", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryCommentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryComment indicates an expected call of QueryComment.
func (mr *MockStoreMockRecorder) QueryComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryComment", reflect.TypeOf((*MockStore)(nil).QueryComment), arg0, arg1)
}

// QueryCommentReport mocks base method.
func (m *MockStore) QueryCommentReport(arg0 context.Context, arg1 db.QueryCommentReportParams) ([]db.QueryCommentReportRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryCommentReport", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryCommentReportRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryCommentReport indicates an expected call of QueryCommentReport.
func (mr *MockStoreMockRecorder) QueryCommentReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryCommentReport", reflect.TypeOf((*MockStore)(nil).QueryCommentReport), arg0, arg1)
}

// QueryFollower mocks base method.
func (m *MockStore) QueryFollower(arg0 context.Context, arg1 db.QueryFollowerParams) ([]db.QueryFollowerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFollower", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryFollowerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFollower indicates an expected call of QueryFollower.
func (mr *MockStoreMockRecorder) QueryFollower(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFollower", reflect.TypeOf((*MockStore)(nil).QueryFollower), arg0, arg1)
}

// QueryFollowing mocks base method.
func (m *MockStore) QueryFollowing(arg0 context.Context, arg1 db.QueryFollowingParams) ([]db.QueryFollowingRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryFollowing", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryFollowingRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryFollowing indicates an expected call of QueryFollowing.
func (mr *MockStoreMockRecorder) QueryFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryFollowing", reflect.TypeOf((*MockStore)(nil).QueryFollowing), arg0, arg1)
}

// QueryMarkdown mocks base method.
func (m *MockStore) QueryMarkdown(arg0 context.Context, arg1 db.QueryMarkdownParams) ([]db.QueryMarkdownRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMarkdown", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryMarkdownRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMarkdown indicates an expected call of QueryMarkdown.
func (mr *MockStoreMockRecorder) QueryMarkdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMarkdown", reflect.TypeOf((*MockStore)(nil).QueryMarkdown), arg0, arg1)
}

// QueryRepo mocks base method.
func (m *MockStore) QueryRepo(arg0 context.Context, arg1 db.QueryRepoParams) ([]db.QueryRepoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryRepoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRepo indicates an expected call of QueryRepo.
func (mr *MockStoreMockRecorder) QueryRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRepo", reflect.TypeOf((*MockStore)(nil).QueryRepo), arg0, arg1)
}

// QueryRepoMarkdown mocks base method.
func (m *MockStore) QueryRepoMarkdown(arg0 context.Context, arg1 db.QueryRepoMarkdownParams) ([]db.QueryRepoMarkdownRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRepoMarkdown", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryRepoMarkdownRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRepoMarkdown indicates an expected call of QueryRepoMarkdown.
func (mr *MockStoreMockRecorder) QueryRepoMarkdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRepoMarkdown", reflect.TypeOf((*MockStore)(nil).QueryRepoMarkdown), arg0, arg1)
}

// QuerySelectedUserByRepo mocks base method.
func (m *MockStore) QuerySelectedUserByRepo(arg0 context.Context, arg1 db.QuerySelectedUserByRepoParams) ([]db.QuerySelectedUserByRepoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySelectedUserByRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.QuerySelectedUserByRepoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySelectedUserByRepo indicates an expected call of QuerySelectedUserByRepo.
func (mr *MockStoreMockRecorder) QuerySelectedUserByRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySelectedUserByRepo", reflect.TypeOf((*MockStore)(nil).QuerySelectedUserByRepo), arg0, arg1)
}

// QuerySession mocks base method.
func (m *MockStore) QuerySession(arg0 context.Context, arg1 db.QuerySessionParams) ([]db.QuerySessionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QuerySession", arg0, arg1)
	ret0, _ := ret[0].([]db.QuerySessionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QuerySession indicates an expected call of QuerySession.
func (mr *MockStoreMockRecorder) QuerySession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QuerySession", reflect.TypeOf((*MockStore)(nil).QuerySession), arg0, arg1)
}

// QueryUser mocks base method.
func (m *MockStore) QueryUser(arg0 context.Context, arg1 db.QueryUserParams) ([]db.QueryUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUser", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUser indicates an expected call of QueryUser.
func (mr *MockStoreMockRecorder) QueryUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUser", reflect.TypeOf((*MockStore)(nil).QueryUser), arg0, arg1)
}

// QueryUserLikeRepo mocks base method.
func (m *MockStore) QueryUserLikeRepo(arg0 context.Context, arg1 db.QueryUserLikeRepoParams) ([]db.QueryUserLikeRepoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserLikeRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryUserLikeRepoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserLikeRepo indicates an expected call of QueryUserLikeRepo.
func (mr *MockStoreMockRecorder) QueryUserLikeRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserLikeRepo", reflect.TypeOf((*MockStore)(nil).QueryUserLikeRepo), arg0, arg1)
}

// QueryUserMarkdown mocks base method.
func (m *MockStore) QueryUserMarkdown(arg0 context.Context, arg1 db.QueryUserMarkdownParams) ([]db.QueryUserMarkdownRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserMarkdown", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryUserMarkdownRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserMarkdown indicates an expected call of QueryUserMarkdown.
func (mr *MockStoreMockRecorder) QueryUserMarkdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserMarkdown", reflect.TypeOf((*MockStore)(nil).QueryUserMarkdown), arg0, arg1)
}

// QueryUserOwnRepo mocks base method.
func (m *MockStore) QueryUserOwnRepo(arg0 context.Context, arg1 db.QueryUserOwnRepoParams) ([]db.QueryUserOwnRepoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserOwnRepo", arg0, arg1)
	ret0, _ := ret[0].([]db.QueryUserOwnRepoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryUserOwnRepo indicates an expected call of QueryUserOwnRepo.
func (mr *MockStoreMockRecorder) QueryUserOwnRepo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserOwnRepo", reflect.TypeOf((*MockStore)(nil).QueryUserOwnRepo), arg0, arg1)
}

// ResetPasswordTx mocks base method.
func (m *MockStore) ResetPasswordTx(arg0 context.Context, arg1 db.ResetPasswordTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPasswordTx indicates an expected call of ResetPasswordTx.
func (mr *MockStoreMockRecorder) ResetPasswordTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordTx", reflect.TypeOf((*MockStore)(nil).ResetPasswordTx), arg0, arg1)
}

// ResetUnreadCount mocks base method.
func (m *MockStore) ResetUnreadCount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUnreadCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetUnreadCount indicates an expected call of ResetUnreadCount.
func (mr *MockStoreMockRecorder) ResetUnreadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUnreadCount", reflect.TypeOf((*MockStore)(nil).ResetUnreadCount), arg0, arg1)
}

// UpdateCommentReportStatus mocks base method.
func (m *MockStore) UpdateCommentReportStatus(arg0 context.Context, arg1 db.UpdateCommentReportStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommentReportStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommentReportStatus indicates an expected call of UpdateCommentReportStatus.
func (mr *MockStoreMockRecorder) UpdateCommentReportStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommentReportStatus", reflect.TypeOf((*MockStore)(nil).UpdateCommentReportStatus), arg0, arg1)
}

// UpdateConfiguration mocks base method.
func (m *MockStore) UpdateConfiguration(arg0 context.Context, arg1 db.UpdateConfigurationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConfiguration", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConfiguration indicates an expected call of UpdateConfiguration.
func (mr *MockStoreMockRecorder) UpdateConfiguration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfiguration", reflect.TypeOf((*MockStore)(nil).UpdateConfiguration), arg0, arg1)
}

// UpdateMarkdownMulti mocks base method.
func (m *MockStore) UpdateMarkdownMulti(arg0 context.Context, arg1 db.UpdateMarkdownMultiParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMarkdownMulti", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMarkdownMulti indicates an expected call of UpdateMarkdownMulti.
func (mr *MockStoreMockRecorder) UpdateMarkdownMulti(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMarkdownMulti", reflect.TypeOf((*MockStore)(nil).UpdateMarkdownMulti), arg0, arg1)
}

// UpdateRepoConfig mocks base method.
func (m *MockStore) UpdateRepoConfig(arg0 context.Context, arg1 db.UpdateRepoConfigParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepoConfig indicates an expected call of UpdateRepoConfig.
func (mr *MockStoreMockRecorder) UpdateRepoConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoConfig", reflect.TypeOf((*MockStore)(nil).UpdateRepoConfig), arg0, arg1)
}

// UpdateRepoInfo mocks base method.
func (m *MockStore) UpdateRepoInfo(arg0 context.Context, arg1 db.UpdateRepoInfoParams) (db.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepoInfo", arg0, arg1)
	ret0, _ := ret[0].(db.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepoInfo indicates an expected call of UpdateRepoInfo.
func (mr *MockStoreMockRecorder) UpdateRepoInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepoInfo", reflect.TypeOf((*MockStore)(nil).UpdateRepoInfo), arg0, arg1)
}

// UpdateUnreadCount mocks base method.
func (m *MockStore) UpdateUnreadCount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnreadCount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnreadCount indicates an expected call of UpdateUnreadCount.
func (mr *MockStoreMockRecorder) UpdateUnreadCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnreadCount", reflect.TypeOf((*MockStore)(nil).UpdateUnreadCount), arg0, arg1)
}

// UpdateUserBasicInfo mocks base method.
func (m *MockStore) UpdateUserBasicInfo(arg0 context.Context, arg1 db.UpdateUserBasicInfoParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBasicInfo", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserBasicInfo indicates an expected call of UpdateUserBasicInfo.
func (mr *MockStoreMockRecorder) UpdateUserBasicInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBasicInfo", reflect.TypeOf((*MockStore)(nil).UpdateUserBasicInfo), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockStore) VerifyEmailTx(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmailTx), arg0, arg1)
}
